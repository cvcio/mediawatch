// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mediawatch/compare/v2/compare.proto

package comparev2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompareService_Single_FullMethodName     = "/mediawatch.compare.v2.CompareService/Single"
	CompareService_OneToMany_FullMethodName  = "/mediawatch.compare.v2.CompareService/OneToMany"
	CompareService_ManyToMany_FullMethodName = "/mediawatch.compare.v2.CompareService/ManyToMany"
)

// CompareServiceClient is the client API for CompareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompareServiceClient interface {
	// Single compares a single document by id with multiple auto-discovered
	Single(ctx context.Context, in *SingleRequest, opts ...grpc.CallOption) (*SingleResponse, error)
	// OneToMany compares a single document by id with multiple document ids provided
	OneToMany(ctx context.Context, in *OneToManyRequest, opts ...grpc.CallOption) (*MultipleResponse, error)
	// ManyToMany compares a list of documents ids with multiple document ids provided
	ManyToMany(ctx context.Context, in *ManyToManyRequest, opts ...grpc.CallOption) (*MultipleResponse, error)
}

type compareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompareServiceClient(cc grpc.ClientConnInterface) CompareServiceClient {
	return &compareServiceClient{cc}
}

func (c *compareServiceClient) Single(ctx context.Context, in *SingleRequest, opts ...grpc.CallOption) (*SingleResponse, error) {
	out := new(SingleResponse)
	err := c.cc.Invoke(ctx, CompareService_Single_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compareServiceClient) OneToMany(ctx context.Context, in *OneToManyRequest, opts ...grpc.CallOption) (*MultipleResponse, error) {
	out := new(MultipleResponse)
	err := c.cc.Invoke(ctx, CompareService_OneToMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compareServiceClient) ManyToMany(ctx context.Context, in *ManyToManyRequest, opts ...grpc.CallOption) (*MultipleResponse, error) {
	out := new(MultipleResponse)
	err := c.cc.Invoke(ctx, CompareService_ManyToMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompareServiceServer is the server API for CompareService service.
// All implementations should embed UnimplementedCompareServiceServer
// for forward compatibility
type CompareServiceServer interface {
	// Single compares a single document by id with multiple auto-discovered
	Single(context.Context, *SingleRequest) (*SingleResponse, error)
	// OneToMany compares a single document by id with multiple document ids provided
	OneToMany(context.Context, *OneToManyRequest) (*MultipleResponse, error)
	// ManyToMany compares a list of documents ids with multiple document ids provided
	ManyToMany(context.Context, *ManyToManyRequest) (*MultipleResponse, error)
}

// UnimplementedCompareServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCompareServiceServer struct {
}

func (UnimplementedCompareServiceServer) Single(context.Context, *SingleRequest) (*SingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Single not implemented")
}
func (UnimplementedCompareServiceServer) OneToMany(context.Context, *OneToManyRequest) (*MultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneToMany not implemented")
}
func (UnimplementedCompareServiceServer) ManyToMany(context.Context, *ManyToManyRequest) (*MultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManyToMany not implemented")
}

// UnsafeCompareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompareServiceServer will
// result in compilation errors.
type UnsafeCompareServiceServer interface {
	mustEmbedUnimplementedCompareServiceServer()
}

func RegisterCompareServiceServer(s grpc.ServiceRegistrar, srv CompareServiceServer) {
	s.RegisterService(&CompareService_ServiceDesc, srv)
}

func _CompareService_Single_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompareServiceServer).Single(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompareService_Single_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompareServiceServer).Single(ctx, req.(*SingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompareService_OneToMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneToManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompareServiceServer).OneToMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompareService_OneToMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompareServiceServer).OneToMany(ctx, req.(*OneToManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompareService_ManyToMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManyToManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompareServiceServer).ManyToMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompareService_ManyToMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompareServiceServer).ManyToMany(ctx, req.(*ManyToManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompareService_ServiceDesc is the grpc.ServiceDesc for CompareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediawatch.compare.v2.CompareService",
	HandlerType: (*CompareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Single",
			Handler:    _CompareService_Single_Handler,
		},
		{
			MethodName: "OneToMany",
			Handler:    _CompareService_OneToMany_Handler,
		},
		{
			MethodName: "ManyToMany",
			Handler:    _CompareService_ManyToMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediawatch/compare/v2/compare.proto",
}
