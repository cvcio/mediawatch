// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mediawatch/compare/v2/compare.proto

package comparev2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/cvcio/mediawatch/pkg/mediawatch/compare/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CompareServiceName is the fully-qualified name of the CompareService service.
	CompareServiceName = "mediawatch.compare.v2.CompareService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CompareServiceSingleProcedure is the fully-qualified name of the CompareService's Single RPC.
	CompareServiceSingleProcedure = "/mediawatch.compare.v2.CompareService/Single"
	// CompareServiceOneToManyProcedure is the fully-qualified name of the CompareService's OneToMany
	// RPC.
	CompareServiceOneToManyProcedure = "/mediawatch.compare.v2.CompareService/OneToMany"
	// CompareServiceManyToManyProcedure is the fully-qualified name of the CompareService's ManyToMany
	// RPC.
	CompareServiceManyToManyProcedure = "/mediawatch.compare.v2.CompareService/ManyToMany"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	compareServiceServiceDescriptor          = v2.File_mediawatch_compare_v2_compare_proto.Services().ByName("CompareService")
	compareServiceSingleMethodDescriptor     = compareServiceServiceDescriptor.Methods().ByName("Single")
	compareServiceOneToManyMethodDescriptor  = compareServiceServiceDescriptor.Methods().ByName("OneToMany")
	compareServiceManyToManyMethodDescriptor = compareServiceServiceDescriptor.Methods().ByName("ManyToMany")
)

// CompareServiceClient is a client for the mediawatch.compare.v2.CompareService service.
type CompareServiceClient interface {
	// Single compares a single document by id with multiple auto-discovered
	Single(context.Context, *connect.Request[v2.SingleRequest]) (*connect.Response[v2.SingleResponse], error)
	// OneToMany compares a single document by id with multiple document ids provided
	OneToMany(context.Context, *connect.Request[v2.OneToManyRequest]) (*connect.Response[v2.MultipleResponse], error)
	// ManyToMany compares a list of documents ids with multiple document ids provided
	ManyToMany(context.Context, *connect.Request[v2.ManyToManyRequest]) (*connect.Response[v2.MultipleResponse], error)
}

// NewCompareServiceClient constructs a client for the mediawatch.compare.v2.CompareService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCompareServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CompareServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &compareServiceClient{
		single: connect.NewClient[v2.SingleRequest, v2.SingleResponse](
			httpClient,
			baseURL+CompareServiceSingleProcedure,
			connect.WithSchema(compareServiceSingleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		oneToMany: connect.NewClient[v2.OneToManyRequest, v2.MultipleResponse](
			httpClient,
			baseURL+CompareServiceOneToManyProcedure,
			connect.WithSchema(compareServiceOneToManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		manyToMany: connect.NewClient[v2.ManyToManyRequest, v2.MultipleResponse](
			httpClient,
			baseURL+CompareServiceManyToManyProcedure,
			connect.WithSchema(compareServiceManyToManyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// compareServiceClient implements CompareServiceClient.
type compareServiceClient struct {
	single     *connect.Client[v2.SingleRequest, v2.SingleResponse]
	oneToMany  *connect.Client[v2.OneToManyRequest, v2.MultipleResponse]
	manyToMany *connect.Client[v2.ManyToManyRequest, v2.MultipleResponse]
}

// Single calls mediawatch.compare.v2.CompareService.Single.
func (c *compareServiceClient) Single(ctx context.Context, req *connect.Request[v2.SingleRequest]) (*connect.Response[v2.SingleResponse], error) {
	return c.single.CallUnary(ctx, req)
}

// OneToMany calls mediawatch.compare.v2.CompareService.OneToMany.
func (c *compareServiceClient) OneToMany(ctx context.Context, req *connect.Request[v2.OneToManyRequest]) (*connect.Response[v2.MultipleResponse], error) {
	return c.oneToMany.CallUnary(ctx, req)
}

// ManyToMany calls mediawatch.compare.v2.CompareService.ManyToMany.
func (c *compareServiceClient) ManyToMany(ctx context.Context, req *connect.Request[v2.ManyToManyRequest]) (*connect.Response[v2.MultipleResponse], error) {
	return c.manyToMany.CallUnary(ctx, req)
}

// CompareServiceHandler is an implementation of the mediawatch.compare.v2.CompareService service.
type CompareServiceHandler interface {
	// Single compares a single document by id with multiple auto-discovered
	Single(context.Context, *connect.Request[v2.SingleRequest]) (*connect.Response[v2.SingleResponse], error)
	// OneToMany compares a single document by id with multiple document ids provided
	OneToMany(context.Context, *connect.Request[v2.OneToManyRequest]) (*connect.Response[v2.MultipleResponse], error)
	// ManyToMany compares a list of documents ids with multiple document ids provided
	ManyToMany(context.Context, *connect.Request[v2.ManyToManyRequest]) (*connect.Response[v2.MultipleResponse], error)
}

// NewCompareServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCompareServiceHandler(svc CompareServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	compareServiceSingleHandler := connect.NewUnaryHandler(
		CompareServiceSingleProcedure,
		svc.Single,
		connect.WithSchema(compareServiceSingleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	compareServiceOneToManyHandler := connect.NewUnaryHandler(
		CompareServiceOneToManyProcedure,
		svc.OneToMany,
		connect.WithSchema(compareServiceOneToManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	compareServiceManyToManyHandler := connect.NewUnaryHandler(
		CompareServiceManyToManyProcedure,
		svc.ManyToMany,
		connect.WithSchema(compareServiceManyToManyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mediawatch.compare.v2.CompareService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CompareServiceSingleProcedure:
			compareServiceSingleHandler.ServeHTTP(w, r)
		case CompareServiceOneToManyProcedure:
			compareServiceOneToManyHandler.ServeHTTP(w, r)
		case CompareServiceManyToManyProcedure:
			compareServiceManyToManyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCompareServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCompareServiceHandler struct{}

func (UnimplementedCompareServiceHandler) Single(context.Context, *connect.Request[v2.SingleRequest]) (*connect.Response[v2.SingleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.compare.v2.CompareService.Single is not implemented"))
}

func (UnimplementedCompareServiceHandler) OneToMany(context.Context, *connect.Request[v2.OneToManyRequest]) (*connect.Response[v2.MultipleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.compare.v2.CompareService.OneToMany is not implemented"))
}

func (UnimplementedCompareServiceHandler) ManyToMany(context.Context, *connect.Request[v2.ManyToManyRequest]) (*connect.Response[v2.MultipleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.compare.v2.CompareService.ManyToMany is not implemented"))
}
