// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mediawatch/posts/v2/post.proto

package postsv2connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v2 "github.com/cvcio/mediawatch/pkg/mediawatch/posts/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PostServiceName is the fully-qualified name of the PostService service.
	PostServiceName = "mediawatch.posts.v2.PostService"
)

// PostServiceClient is a client for the mediawatch.posts.v2.PostService service.
type PostServiceClient interface {
	GetPost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	GetPosts(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	CreatePost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	UpdatePost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	DeletePost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	StreamPosts(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.ServerStreamForClient[v2.PostResponse], error)
}

// NewPostServiceClient constructs a client for the mediawatch.posts.v2.PostService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &postServiceClient{
		getPost: connect_go.NewClient[v2.PostRequest, v2.PostResponse](
			httpClient,
			baseURL+"/mediawatch.posts.v2.PostService/GetPost",
			opts...,
		),
		getPosts: connect_go.NewClient[v2.PostRequest, v2.PostResponse](
			httpClient,
			baseURL+"/mediawatch.posts.v2.PostService/GetPosts",
			opts...,
		),
		createPost: connect_go.NewClient[v2.PostRequest, v2.PostResponse](
			httpClient,
			baseURL+"/mediawatch.posts.v2.PostService/CreatePost",
			opts...,
		),
		updatePost: connect_go.NewClient[v2.PostRequest, v2.PostResponse](
			httpClient,
			baseURL+"/mediawatch.posts.v2.PostService/UpdatePost",
			opts...,
		),
		deletePost: connect_go.NewClient[v2.PostRequest, v2.PostResponse](
			httpClient,
			baseURL+"/mediawatch.posts.v2.PostService/DeletePost",
			opts...,
		),
		streamPosts: connect_go.NewClient[v2.PostRequest, v2.PostResponse](
			httpClient,
			baseURL+"/mediawatch.posts.v2.PostService/StreamPosts",
			opts...,
		),
	}
}

// postServiceClient implements PostServiceClient.
type postServiceClient struct {
	getPost     *connect_go.Client[v2.PostRequest, v2.PostResponse]
	getPosts    *connect_go.Client[v2.PostRequest, v2.PostResponse]
	createPost  *connect_go.Client[v2.PostRequest, v2.PostResponse]
	updatePost  *connect_go.Client[v2.PostRequest, v2.PostResponse]
	deletePost  *connect_go.Client[v2.PostRequest, v2.PostResponse]
	streamPosts *connect_go.Client[v2.PostRequest, v2.PostResponse]
}

// GetPost calls mediawatch.posts.v2.PostService.GetPost.
func (c *postServiceClient) GetPost(ctx context.Context, req *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return c.getPost.CallUnary(ctx, req)
}

// GetPosts calls mediawatch.posts.v2.PostService.GetPosts.
func (c *postServiceClient) GetPosts(ctx context.Context, req *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return c.getPosts.CallUnary(ctx, req)
}

// CreatePost calls mediawatch.posts.v2.PostService.CreatePost.
func (c *postServiceClient) CreatePost(ctx context.Context, req *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return c.createPost.CallUnary(ctx, req)
}

// UpdatePost calls mediawatch.posts.v2.PostService.UpdatePost.
func (c *postServiceClient) UpdatePost(ctx context.Context, req *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return c.updatePost.CallUnary(ctx, req)
}

// DeletePost calls mediawatch.posts.v2.PostService.DeletePost.
func (c *postServiceClient) DeletePost(ctx context.Context, req *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return c.deletePost.CallUnary(ctx, req)
}

// StreamPosts calls mediawatch.posts.v2.PostService.StreamPosts.
func (c *postServiceClient) StreamPosts(ctx context.Context, req *connect_go.Request[v2.PostRequest]) (*connect_go.ServerStreamForClient[v2.PostResponse], error) {
	return c.streamPosts.CallServerStream(ctx, req)
}

// PostServiceHandler is an implementation of the mediawatch.posts.v2.PostService service.
type PostServiceHandler interface {
	GetPost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	GetPosts(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	CreatePost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	UpdatePost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	DeletePost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error)
	StreamPosts(context.Context, *connect_go.Request[v2.PostRequest], *connect_go.ServerStream[v2.PostResponse]) error
}

// NewPostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostServiceHandler(svc PostServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/mediawatch.posts.v2.PostService/GetPost", connect_go.NewUnaryHandler(
		"/mediawatch.posts.v2.PostService/GetPost",
		svc.GetPost,
		opts...,
	))
	mux.Handle("/mediawatch.posts.v2.PostService/GetPosts", connect_go.NewUnaryHandler(
		"/mediawatch.posts.v2.PostService/GetPosts",
		svc.GetPosts,
		opts...,
	))
	mux.Handle("/mediawatch.posts.v2.PostService/CreatePost", connect_go.NewUnaryHandler(
		"/mediawatch.posts.v2.PostService/CreatePost",
		svc.CreatePost,
		opts...,
	))
	mux.Handle("/mediawatch.posts.v2.PostService/UpdatePost", connect_go.NewUnaryHandler(
		"/mediawatch.posts.v2.PostService/UpdatePost",
		svc.UpdatePost,
		opts...,
	))
	mux.Handle("/mediawatch.posts.v2.PostService/DeletePost", connect_go.NewUnaryHandler(
		"/mediawatch.posts.v2.PostService/DeletePost",
		svc.DeletePost,
		opts...,
	))
	mux.Handle("/mediawatch.posts.v2.PostService/StreamPosts", connect_go.NewServerStreamHandler(
		"/mediawatch.posts.v2.PostService/StreamPosts",
		svc.StreamPosts,
		opts...,
	))
	return "/mediawatch.posts.v2.PostService/", mux
}

// UnimplementedPostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostServiceHandler struct{}

func (UnimplementedPostServiceHandler) GetPost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.posts.v2.PostService.GetPost is not implemented"))
}

func (UnimplementedPostServiceHandler) GetPosts(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.posts.v2.PostService.GetPosts is not implemented"))
}

func (UnimplementedPostServiceHandler) CreatePost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.posts.v2.PostService.CreatePost is not implemented"))
}

func (UnimplementedPostServiceHandler) UpdatePost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.posts.v2.PostService.UpdatePost is not implemented"))
}

func (UnimplementedPostServiceHandler) DeletePost(context.Context, *connect_go.Request[v2.PostRequest]) (*connect_go.Response[v2.PostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.posts.v2.PostService.DeletePost is not implemented"))
}

func (UnimplementedPostServiceHandler) StreamPosts(context.Context, *connect_go.Request[v2.PostRequest], *connect_go.ServerStream[v2.PostResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.posts.v2.PostService.StreamPosts is not implemented"))
}
