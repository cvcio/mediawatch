// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mediawatch/passages/v2/passage.proto

package passagesv2

import (
	context "context"
	v2 "github.com/cvcio/mediawatch/pkg/mediawatch/common/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PassageService_CreatePassage_FullMethodName = "/mediawatch.passages.v2.PassageService/CreatePassage"
	PassageService_GetPassages_FullMethodName   = "/mediawatch.passages.v2.PassageService/GetPassages"
	PassageService_DeletePassage_FullMethodName = "/mediawatch.passages.v2.PassageService/DeletePassage"
)

// PassageServiceClient is the client API for PassageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Passage Service
type PassageServiceClient interface {
	// create a new passage
	CreatePassage(ctx context.Context, in *Passage, opts ...grpc.CallOption) (*Passage, error)
	// get list of passages by query
	GetPassages(ctx context.Context, in *QueryPassage, opts ...grpc.CallOption) (*PassageList, error)
	// delete a passage by id
	DeletePassage(ctx context.Context, in *Passage, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
}

type passageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassageServiceClient(cc grpc.ClientConnInterface) PassageServiceClient {
	return &passageServiceClient{cc}
}

func (c *passageServiceClient) CreatePassage(ctx context.Context, in *Passage, opts ...grpc.CallOption) (*Passage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Passage)
	err := c.cc.Invoke(ctx, PassageService_CreatePassage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passageServiceClient) GetPassages(ctx context.Context, in *QueryPassage, opts ...grpc.CallOption) (*PassageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PassageList)
	err := c.cc.Invoke(ctx, PassageService_GetPassages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passageServiceClient) DeletePassage(ctx context.Context, in *Passage, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, PassageService_DeletePassage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassageServiceServer is the server API for PassageService service.
// All implementations should embed UnimplementedPassageServiceServer
// for forward compatibility.
//
// Passage Service
type PassageServiceServer interface {
	// create a new passage
	CreatePassage(context.Context, *Passage) (*Passage, error)
	// get list of passages by query
	GetPassages(context.Context, *QueryPassage) (*PassageList, error)
	// delete a passage by id
	DeletePassage(context.Context, *Passage) (*v2.ResponseWithMessage, error)
}

// UnimplementedPassageServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPassageServiceServer struct{}

func (UnimplementedPassageServiceServer) CreatePassage(context.Context, *Passage) (*Passage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassage not implemented")
}
func (UnimplementedPassageServiceServer) GetPassages(context.Context, *QueryPassage) (*PassageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassages not implemented")
}
func (UnimplementedPassageServiceServer) DeletePassage(context.Context, *Passage) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassage not implemented")
}
func (UnimplementedPassageServiceServer) testEmbeddedByValue() {}

// UnsafePassageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassageServiceServer will
// result in compilation errors.
type UnsafePassageServiceServer interface {
	mustEmbedUnimplementedPassageServiceServer()
}

func RegisterPassageServiceServer(s grpc.ServiceRegistrar, srv PassageServiceServer) {
	// If the following call pancis, it indicates UnimplementedPassageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PassageService_ServiceDesc, srv)
}

func _PassageService_CreatePassage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Passage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassageServiceServer).CreatePassage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassageService_CreatePassage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageServiceServer).CreatePassage(ctx, req.(*Passage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageService_GetPassages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPassage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassageServiceServer).GetPassages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassageService_GetPassages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageServiceServer).GetPassages(ctx, req.(*QueryPassage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassageService_DeletePassage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Passage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassageServiceServer).DeletePassage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassageService_DeletePassage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassageServiceServer).DeletePassage(ctx, req.(*Passage))
	}
	return interceptor(ctx, in, info, handler)
}

// PassageService_ServiceDesc is the grpc.ServiceDesc for PassageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediawatch.passages.v2.PassageService",
	HandlerType: (*PassageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePassage",
			Handler:    _PassageService_CreatePassage_Handler,
		},
		{
			MethodName: "GetPassages",
			Handler:    _PassageService_GetPassages_Handler,
		},
		{
			MethodName: "DeletePassage",
			Handler:    _PassageService_DeletePassage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediawatch/passages/v2/passage.proto",
}
