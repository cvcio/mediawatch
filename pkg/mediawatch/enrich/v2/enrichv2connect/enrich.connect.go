// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mediawatch/enrich/v2/enrich.proto

package enrichv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/cvcio/mediawatch/pkg/mediawatch/enrich/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnrichServiceName is the fully-qualified name of the EnrichService service.
	EnrichServiceName = "mediawatch.enrich.v2.EnrichService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnrichServiceNLPProcedure is the fully-qualified name of the EnrichService's NLP RPC.
	EnrichServiceNLPProcedure = "/mediawatch.enrich.v2.EnrichService/NLP"
	// EnrichServiceStopWordsProcedure is the fully-qualified name of the EnrichService's StopWords RPC.
	EnrichServiceStopWordsProcedure = "/mediawatch.enrich.v2.EnrichService/StopWords"
	// EnrichServiceKeywordsProcedure is the fully-qualified name of the EnrichService's Keywords RPC.
	EnrichServiceKeywordsProcedure = "/mediawatch.enrich.v2.EnrichService/Keywords"
	// EnrichServiceEntitiesProcedure is the fully-qualified name of the EnrichService's Entities RPC.
	EnrichServiceEntitiesProcedure = "/mediawatch.enrich.v2.EnrichService/Entities"
	// EnrichServiceSummaryProcedure is the fully-qualified name of the EnrichService's Summary RPC.
	EnrichServiceSummaryProcedure = "/mediawatch.enrich.v2.EnrichService/Summary"
	// EnrichServiceTopicsProcedure is the fully-qualified name of the EnrichService's Topics RPC.
	EnrichServiceTopicsProcedure = "/mediawatch.enrich.v2.EnrichService/Topics"
	// EnrichServiceQuotesProcedure is the fully-qualified name of the EnrichService's Quotes RPC.
	EnrichServiceQuotesProcedure = "/mediawatch.enrich.v2.EnrichService/Quotes"
	// EnrichServiceClaimsProcedure is the fully-qualified name of the EnrichService's Claims RPC.
	EnrichServiceClaimsProcedure = "/mediawatch.enrich.v2.EnrichService/Claims"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	enrichServiceServiceDescriptor         = v2.File_mediawatch_enrich_v2_enrich_proto.Services().ByName("EnrichService")
	enrichServiceNLPMethodDescriptor       = enrichServiceServiceDescriptor.Methods().ByName("NLP")
	enrichServiceStopWordsMethodDescriptor = enrichServiceServiceDescriptor.Methods().ByName("StopWords")
	enrichServiceKeywordsMethodDescriptor  = enrichServiceServiceDescriptor.Methods().ByName("Keywords")
	enrichServiceEntitiesMethodDescriptor  = enrichServiceServiceDescriptor.Methods().ByName("Entities")
	enrichServiceSummaryMethodDescriptor   = enrichServiceServiceDescriptor.Methods().ByName("Summary")
	enrichServiceTopicsMethodDescriptor    = enrichServiceServiceDescriptor.Methods().ByName("Topics")
	enrichServiceQuotesMethodDescriptor    = enrichServiceServiceDescriptor.Methods().ByName("Quotes")
	enrichServiceClaimsMethodDescriptor    = enrichServiceServiceDescriptor.Methods().ByName("Claims")
)

// EnrichServiceClient is a client for the mediawatch.enrich.v2.EnrichService service.
type EnrichServiceClient interface {
	NLP(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	StopWords(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Keywords(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Entities(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Summary(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Topics(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Quotes(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Claims(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
}

// NewEnrichServiceClient constructs a client for the mediawatch.enrich.v2.EnrichService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnrichServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnrichServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &enrichServiceClient{
		nLP: connect.NewClient[v2.EnrichRequest, v2.EnrichResponse](
			httpClient,
			baseURL+EnrichServiceNLPProcedure,
			connect.WithSchema(enrichServiceNLPMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopWords: connect.NewClient[v2.EnrichRequest, v2.EnrichResponse](
			httpClient,
			baseURL+EnrichServiceStopWordsProcedure,
			connect.WithSchema(enrichServiceStopWordsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		keywords: connect.NewClient[v2.EnrichRequest, v2.EnrichResponse](
			httpClient,
			baseURL+EnrichServiceKeywordsProcedure,
			connect.WithSchema(enrichServiceKeywordsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		entities: connect.NewClient[v2.EnrichRequest, v2.EnrichResponse](
			httpClient,
			baseURL+EnrichServiceEntitiesProcedure,
			connect.WithSchema(enrichServiceEntitiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		summary: connect.NewClient[v2.EnrichRequest, v2.EnrichResponse](
			httpClient,
			baseURL+EnrichServiceSummaryProcedure,
			connect.WithSchema(enrichServiceSummaryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		topics: connect.NewClient[v2.EnrichRequest, v2.EnrichResponse](
			httpClient,
			baseURL+EnrichServiceTopicsProcedure,
			connect.WithSchema(enrichServiceTopicsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		quotes: connect.NewClient[v2.EnrichRequest, v2.EnrichResponse](
			httpClient,
			baseURL+EnrichServiceQuotesProcedure,
			connect.WithSchema(enrichServiceQuotesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		claims: connect.NewClient[v2.EnrichRequest, v2.EnrichResponse](
			httpClient,
			baseURL+EnrichServiceClaimsProcedure,
			connect.WithSchema(enrichServiceClaimsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// enrichServiceClient implements EnrichServiceClient.
type enrichServiceClient struct {
	nLP       *connect.Client[v2.EnrichRequest, v2.EnrichResponse]
	stopWords *connect.Client[v2.EnrichRequest, v2.EnrichResponse]
	keywords  *connect.Client[v2.EnrichRequest, v2.EnrichResponse]
	entities  *connect.Client[v2.EnrichRequest, v2.EnrichResponse]
	summary   *connect.Client[v2.EnrichRequest, v2.EnrichResponse]
	topics    *connect.Client[v2.EnrichRequest, v2.EnrichResponse]
	quotes    *connect.Client[v2.EnrichRequest, v2.EnrichResponse]
	claims    *connect.Client[v2.EnrichRequest, v2.EnrichResponse]
}

// NLP calls mediawatch.enrich.v2.EnrichService.NLP.
func (c *enrichServiceClient) NLP(ctx context.Context, req *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return c.nLP.CallUnary(ctx, req)
}

// StopWords calls mediawatch.enrich.v2.EnrichService.StopWords.
func (c *enrichServiceClient) StopWords(ctx context.Context, req *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return c.stopWords.CallUnary(ctx, req)
}

// Keywords calls mediawatch.enrich.v2.EnrichService.Keywords.
func (c *enrichServiceClient) Keywords(ctx context.Context, req *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return c.keywords.CallUnary(ctx, req)
}

// Entities calls mediawatch.enrich.v2.EnrichService.Entities.
func (c *enrichServiceClient) Entities(ctx context.Context, req *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return c.entities.CallUnary(ctx, req)
}

// Summary calls mediawatch.enrich.v2.EnrichService.Summary.
func (c *enrichServiceClient) Summary(ctx context.Context, req *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return c.summary.CallUnary(ctx, req)
}

// Topics calls mediawatch.enrich.v2.EnrichService.Topics.
func (c *enrichServiceClient) Topics(ctx context.Context, req *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return c.topics.CallUnary(ctx, req)
}

// Quotes calls mediawatch.enrich.v2.EnrichService.Quotes.
func (c *enrichServiceClient) Quotes(ctx context.Context, req *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return c.quotes.CallUnary(ctx, req)
}

// Claims calls mediawatch.enrich.v2.EnrichService.Claims.
func (c *enrichServiceClient) Claims(ctx context.Context, req *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return c.claims.CallUnary(ctx, req)
}

// EnrichServiceHandler is an implementation of the mediawatch.enrich.v2.EnrichService service.
type EnrichServiceHandler interface {
	NLP(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	StopWords(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Keywords(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Entities(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Summary(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Topics(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Quotes(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
	Claims(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error)
}

// NewEnrichServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnrichServiceHandler(svc EnrichServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	enrichServiceNLPHandler := connect.NewUnaryHandler(
		EnrichServiceNLPProcedure,
		svc.NLP,
		connect.WithSchema(enrichServiceNLPMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	enrichServiceStopWordsHandler := connect.NewUnaryHandler(
		EnrichServiceStopWordsProcedure,
		svc.StopWords,
		connect.WithSchema(enrichServiceStopWordsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	enrichServiceKeywordsHandler := connect.NewUnaryHandler(
		EnrichServiceKeywordsProcedure,
		svc.Keywords,
		connect.WithSchema(enrichServiceKeywordsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	enrichServiceEntitiesHandler := connect.NewUnaryHandler(
		EnrichServiceEntitiesProcedure,
		svc.Entities,
		connect.WithSchema(enrichServiceEntitiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	enrichServiceSummaryHandler := connect.NewUnaryHandler(
		EnrichServiceSummaryProcedure,
		svc.Summary,
		connect.WithSchema(enrichServiceSummaryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	enrichServiceTopicsHandler := connect.NewUnaryHandler(
		EnrichServiceTopicsProcedure,
		svc.Topics,
		connect.WithSchema(enrichServiceTopicsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	enrichServiceQuotesHandler := connect.NewUnaryHandler(
		EnrichServiceQuotesProcedure,
		svc.Quotes,
		connect.WithSchema(enrichServiceQuotesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	enrichServiceClaimsHandler := connect.NewUnaryHandler(
		EnrichServiceClaimsProcedure,
		svc.Claims,
		connect.WithSchema(enrichServiceClaimsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mediawatch.enrich.v2.EnrichService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnrichServiceNLPProcedure:
			enrichServiceNLPHandler.ServeHTTP(w, r)
		case EnrichServiceStopWordsProcedure:
			enrichServiceStopWordsHandler.ServeHTTP(w, r)
		case EnrichServiceKeywordsProcedure:
			enrichServiceKeywordsHandler.ServeHTTP(w, r)
		case EnrichServiceEntitiesProcedure:
			enrichServiceEntitiesHandler.ServeHTTP(w, r)
		case EnrichServiceSummaryProcedure:
			enrichServiceSummaryHandler.ServeHTTP(w, r)
		case EnrichServiceTopicsProcedure:
			enrichServiceTopicsHandler.ServeHTTP(w, r)
		case EnrichServiceQuotesProcedure:
			enrichServiceQuotesHandler.ServeHTTP(w, r)
		case EnrichServiceClaimsProcedure:
			enrichServiceClaimsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnrichServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnrichServiceHandler struct{}

func (UnimplementedEnrichServiceHandler) NLP(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.enrich.v2.EnrichService.NLP is not implemented"))
}

func (UnimplementedEnrichServiceHandler) StopWords(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.enrich.v2.EnrichService.StopWords is not implemented"))
}

func (UnimplementedEnrichServiceHandler) Keywords(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.enrich.v2.EnrichService.Keywords is not implemented"))
}

func (UnimplementedEnrichServiceHandler) Entities(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.enrich.v2.EnrichService.Entities is not implemented"))
}

func (UnimplementedEnrichServiceHandler) Summary(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.enrich.v2.EnrichService.Summary is not implemented"))
}

func (UnimplementedEnrichServiceHandler) Topics(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.enrich.v2.EnrichService.Topics is not implemented"))
}

func (UnimplementedEnrichServiceHandler) Quotes(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.enrich.v2.EnrichService.Quotes is not implemented"))
}

func (UnimplementedEnrichServiceHandler) Claims(context.Context, *connect.Request[v2.EnrichRequest]) (*connect.Response[v2.EnrichResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.enrich.v2.EnrichService.Claims is not implemented"))
}
