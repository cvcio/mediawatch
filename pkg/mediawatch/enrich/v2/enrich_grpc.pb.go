// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mediawatch/enrich/v2/enrich.proto

package enrichv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnrichService_NLP_FullMethodName       = "/mediawatch.enrich.v2.EnrichService/NLP"
	EnrichService_StopWords_FullMethodName = "/mediawatch.enrich.v2.EnrichService/StopWords"
	EnrichService_Keywords_FullMethodName  = "/mediawatch.enrich.v2.EnrichService/Keywords"
	EnrichService_Entities_FullMethodName  = "/mediawatch.enrich.v2.EnrichService/Entities"
	EnrichService_Summary_FullMethodName   = "/mediawatch.enrich.v2.EnrichService/Summary"
	EnrichService_Topics_FullMethodName    = "/mediawatch.enrich.v2.EnrichService/Topics"
	EnrichService_Quotes_FullMethodName    = "/mediawatch.enrich.v2.EnrichService/Quotes"
	EnrichService_Claims_FullMethodName    = "/mediawatch.enrich.v2.EnrichService/Claims"
)

// EnrichServiceClient is the client API for EnrichService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnrichServiceClient interface {
	NLP(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error)
	StopWords(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error)
	Keywords(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error)
	Entities(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error)
	Summary(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error)
	Topics(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error)
	Quotes(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error)
	Claims(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error)
}

type enrichServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrichServiceClient(cc grpc.ClientConnInterface) EnrichServiceClient {
	return &enrichServiceClient{cc}
}

func (c *enrichServiceClient) NLP(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error) {
	out := new(EnrichResponse)
	err := c.cc.Invoke(ctx, EnrichService_NLP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichServiceClient) StopWords(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error) {
	out := new(EnrichResponse)
	err := c.cc.Invoke(ctx, EnrichService_StopWords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichServiceClient) Keywords(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error) {
	out := new(EnrichResponse)
	err := c.cc.Invoke(ctx, EnrichService_Keywords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichServiceClient) Entities(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error) {
	out := new(EnrichResponse)
	err := c.cc.Invoke(ctx, EnrichService_Entities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichServiceClient) Summary(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error) {
	out := new(EnrichResponse)
	err := c.cc.Invoke(ctx, EnrichService_Summary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichServiceClient) Topics(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error) {
	out := new(EnrichResponse)
	err := c.cc.Invoke(ctx, EnrichService_Topics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichServiceClient) Quotes(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error) {
	out := new(EnrichResponse)
	err := c.cc.Invoke(ctx, EnrichService_Quotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichServiceClient) Claims(ctx context.Context, in *EnrichRequest, opts ...grpc.CallOption) (*EnrichResponse, error) {
	out := new(EnrichResponse)
	err := c.cc.Invoke(ctx, EnrichService_Claims_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrichServiceServer is the server API for EnrichService service.
// All implementations should embed UnimplementedEnrichServiceServer
// for forward compatibility
type EnrichServiceServer interface {
	NLP(context.Context, *EnrichRequest) (*EnrichResponse, error)
	StopWords(context.Context, *EnrichRequest) (*EnrichResponse, error)
	Keywords(context.Context, *EnrichRequest) (*EnrichResponse, error)
	Entities(context.Context, *EnrichRequest) (*EnrichResponse, error)
	Summary(context.Context, *EnrichRequest) (*EnrichResponse, error)
	Topics(context.Context, *EnrichRequest) (*EnrichResponse, error)
	Quotes(context.Context, *EnrichRequest) (*EnrichResponse, error)
	Claims(context.Context, *EnrichRequest) (*EnrichResponse, error)
}

// UnimplementedEnrichServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEnrichServiceServer struct {
}

func (UnimplementedEnrichServiceServer) NLP(context.Context, *EnrichRequest) (*EnrichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NLP not implemented")
}
func (UnimplementedEnrichServiceServer) StopWords(context.Context, *EnrichRequest) (*EnrichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWords not implemented")
}
func (UnimplementedEnrichServiceServer) Keywords(context.Context, *EnrichRequest) (*EnrichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keywords not implemented")
}
func (UnimplementedEnrichServiceServer) Entities(context.Context, *EnrichRequest) (*EnrichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entities not implemented")
}
func (UnimplementedEnrichServiceServer) Summary(context.Context, *EnrichRequest) (*EnrichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedEnrichServiceServer) Topics(context.Context, *EnrichRequest) (*EnrichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Topics not implemented")
}
func (UnimplementedEnrichServiceServer) Quotes(context.Context, *EnrichRequest) (*EnrichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quotes not implemented")
}
func (UnimplementedEnrichServiceServer) Claims(context.Context, *EnrichRequest) (*EnrichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claims not implemented")
}

// UnsafeEnrichServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrichServiceServer will
// result in compilation errors.
type UnsafeEnrichServiceServer interface {
	mustEmbedUnimplementedEnrichServiceServer()
}

func RegisterEnrichServiceServer(s grpc.ServiceRegistrar, srv EnrichServiceServer) {
	s.RegisterService(&EnrichService_ServiceDesc, srv)
}

func _EnrichService_NLP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichServiceServer).NLP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichService_NLP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichServiceServer).NLP(ctx, req.(*EnrichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichService_StopWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichServiceServer).StopWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichService_StopWords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichServiceServer).StopWords(ctx, req.(*EnrichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichService_Keywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichServiceServer).Keywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichService_Keywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichServiceServer).Keywords(ctx, req.(*EnrichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichService_Entities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichServiceServer).Entities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichService_Entities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichServiceServer).Entities(ctx, req.(*EnrichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichService_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichServiceServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichService_Summary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichServiceServer).Summary(ctx, req.(*EnrichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichService_Topics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichServiceServer).Topics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichService_Topics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichServiceServer).Topics(ctx, req.(*EnrichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichService_Quotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichServiceServer).Quotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichService_Quotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichServiceServer).Quotes(ctx, req.(*EnrichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichService_Claims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichServiceServer).Claims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichService_Claims_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichServiceServer).Claims(ctx, req.(*EnrichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnrichService_ServiceDesc is the grpc.ServiceDesc for EnrichService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrichService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediawatch.enrich.v2.EnrichService",
	HandlerType: (*EnrichServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NLP",
			Handler:    _EnrichService_NLP_Handler,
		},
		{
			MethodName: "StopWords",
			Handler:    _EnrichService_StopWords_Handler,
		},
		{
			MethodName: "Keywords",
			Handler:    _EnrichService_Keywords_Handler,
		},
		{
			MethodName: "Entities",
			Handler:    _EnrichService_Entities_Handler,
		},
		{
			MethodName: "Summary",
			Handler:    _EnrichService_Summary_Handler,
		},
		{
			MethodName: "Topics",
			Handler:    _EnrichService_Topics_Handler,
		},
		{
			MethodName: "Quotes",
			Handler:    _EnrichService_Quotes_Handler,
		},
		{
			MethodName: "Claims",
			Handler:    _EnrichService_Claims_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediawatch/enrich/v2/enrich.proto",
}
