// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: mediawatch/enrich/v2/enrich.proto

package enrichv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnrichRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *EnrichRequest) Reset() {
	*x = EnrichRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichRequest) ProtoMessage() {}

func (x *EnrichRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichRequest.ProtoReflect.Descriptor instead.
func (*EnrichRequest) Descriptor() ([]byte, []int) {
	return file_mediawatch_enrich_v2_enrich_proto_rawDescGZIP(), []int{0}
}

func (x *EnrichRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *EnrichRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Type  string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Score float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	Index []int32 `protobuf:"varint,4,rep,packed,name=index,proto3" json:"index,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_mediawatch_enrich_v2_enrich_proto_rawDescGZIP(), []int{1}
}

func (x *Entity) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Entity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Entity) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Entity) GetIndex() []int32 {
	if x != nil {
		return x.Index
	}
	return nil
}

type NLP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stopwords []string  `protobuf:"bytes,1,rep,name=stopwords,proto3" json:"stopwords,omitempty"`
	Keywords  []string  `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Entities  []*Entity `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	Summary   string    `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Topics    []*Entity `protobuf:"bytes,5,rep,name=topics,proto3" json:"topics,omitempty"`
	Claims    []*Entity `protobuf:"bytes,6,rep,name=claims,proto3" json:"claims,omitempty"`
	Quotes    []*Entity `protobuf:"bytes,7,rep,name=quotes,proto3" json:"quotes,omitempty"`
}

func (x *NLP) Reset() {
	*x = NLP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NLP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NLP) ProtoMessage() {}

func (x *NLP) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NLP.ProtoReflect.Descriptor instead.
func (*NLP) Descriptor() ([]byte, []int) {
	return file_mediawatch_enrich_v2_enrich_proto_rawDescGZIP(), []int{2}
}

func (x *NLP) GetStopwords() []string {
	if x != nil {
		return x.Stopwords
	}
	return nil
}

func (x *NLP) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *NLP) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *NLP) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NLP) GetTopics() []*Entity {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *NLP) GetClaims() []*Entity {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *NLP) GetQuotes() []*Entity {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nlp *NLP `protobuf:"bytes,1,opt,name=nlp,proto3" json:"nlp,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_mediawatch_enrich_v2_enrich_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetNlp() *NLP {
	if x != nil {
		return x.Nlp
	}
	return nil
}

type EnrichResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success, error
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 200, 500
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// message
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// data Object {}
	Data *Data `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EnrichResponse) Reset() {
	*x = EnrichResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichResponse) ProtoMessage() {}

func (x *EnrichResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_enrich_v2_enrich_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichResponse.ProtoReflect.Descriptor instead.
func (*EnrichResponse) Descriptor() ([]byte, []int) {
	return file_mediawatch_enrich_v2_enrich_proto_rawDescGZIP(), []int{4}
}

func (x *EnrichResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EnrichResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EnrichResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EnrichResponse) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_mediawatch_enrich_v2_enrich_proto protoreflect.FileDescriptor

var file_mediawatch_enrich_v2_enrich_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x22, 0x37, 0x0a, 0x0d, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x22, 0x5c, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xb5, 0x02, 0x0a, 0x03, 0x4e, 0x4c, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x06,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2b, 0x0a, 0x03, 0x6e, 0x6c, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x4c, 0x50, 0x52, 0x03, 0x6e, 0x6c, 0x70, 0x22, 0x86, 0x01,
	0x0a, 0x0e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xcc, 0x05, 0x0a, 0x0d, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x03, 0x4e, 0x4c, 0x50, 0x12,
	0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x09,
	0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x06, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x06, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xd8, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e,
	0x76, 0x32, 0x42, 0x0b, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x76,
	0x63, 0x69, 0x6f, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x65, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x2f, 0x76, 0x32, 0x3b, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x76, 0x32,
	0xa2, 0x02, 0x03, 0x4d, 0x45, 0x58, 0xaa, 0x02, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x14,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5c, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x5c, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x3a, 0x3a, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x3a, 0x3a, 0x56, 0x32,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mediawatch_enrich_v2_enrich_proto_rawDescOnce sync.Once
	file_mediawatch_enrich_v2_enrich_proto_rawDescData = file_mediawatch_enrich_v2_enrich_proto_rawDesc
)

func file_mediawatch_enrich_v2_enrich_proto_rawDescGZIP() []byte {
	file_mediawatch_enrich_v2_enrich_proto_rawDescOnce.Do(func() {
		file_mediawatch_enrich_v2_enrich_proto_rawDescData = protoimpl.X.CompressGZIP(file_mediawatch_enrich_v2_enrich_proto_rawDescData)
	})
	return file_mediawatch_enrich_v2_enrich_proto_rawDescData
}

var file_mediawatch_enrich_v2_enrich_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_mediawatch_enrich_v2_enrich_proto_goTypes = []interface{}{
	(*EnrichRequest)(nil),  // 0: mediawatch.enrich.v2.EnrichRequest
	(*Entity)(nil),         // 1: mediawatch.enrich.v2.Entity
	(*NLP)(nil),            // 2: mediawatch.enrich.v2.NLP
	(*Data)(nil),           // 3: mediawatch.enrich.v2.Data
	(*EnrichResponse)(nil), // 4: mediawatch.enrich.v2.EnrichResponse
}
var file_mediawatch_enrich_v2_enrich_proto_depIdxs = []int32{
	1,  // 0: mediawatch.enrich.v2.NLP.entities:type_name -> mediawatch.enrich.v2.Entity
	1,  // 1: mediawatch.enrich.v2.NLP.topics:type_name -> mediawatch.enrich.v2.Entity
	1,  // 2: mediawatch.enrich.v2.NLP.claims:type_name -> mediawatch.enrich.v2.Entity
	1,  // 3: mediawatch.enrich.v2.NLP.quotes:type_name -> mediawatch.enrich.v2.Entity
	2,  // 4: mediawatch.enrich.v2.Data.nlp:type_name -> mediawatch.enrich.v2.NLP
	3,  // 5: mediawatch.enrich.v2.EnrichResponse.data:type_name -> mediawatch.enrich.v2.Data
	0,  // 6: mediawatch.enrich.v2.EnrichService.NLP:input_type -> mediawatch.enrich.v2.EnrichRequest
	0,  // 7: mediawatch.enrich.v2.EnrichService.StopWords:input_type -> mediawatch.enrich.v2.EnrichRequest
	0,  // 8: mediawatch.enrich.v2.EnrichService.Keywords:input_type -> mediawatch.enrich.v2.EnrichRequest
	0,  // 9: mediawatch.enrich.v2.EnrichService.Entities:input_type -> mediawatch.enrich.v2.EnrichRequest
	0,  // 10: mediawatch.enrich.v2.EnrichService.Summary:input_type -> mediawatch.enrich.v2.EnrichRequest
	0,  // 11: mediawatch.enrich.v2.EnrichService.Topics:input_type -> mediawatch.enrich.v2.EnrichRequest
	0,  // 12: mediawatch.enrich.v2.EnrichService.Quotes:input_type -> mediawatch.enrich.v2.EnrichRequest
	0,  // 13: mediawatch.enrich.v2.EnrichService.Claims:input_type -> mediawatch.enrich.v2.EnrichRequest
	4,  // 14: mediawatch.enrich.v2.EnrichService.NLP:output_type -> mediawatch.enrich.v2.EnrichResponse
	4,  // 15: mediawatch.enrich.v2.EnrichService.StopWords:output_type -> mediawatch.enrich.v2.EnrichResponse
	4,  // 16: mediawatch.enrich.v2.EnrichService.Keywords:output_type -> mediawatch.enrich.v2.EnrichResponse
	4,  // 17: mediawatch.enrich.v2.EnrichService.Entities:output_type -> mediawatch.enrich.v2.EnrichResponse
	4,  // 18: mediawatch.enrich.v2.EnrichService.Summary:output_type -> mediawatch.enrich.v2.EnrichResponse
	4,  // 19: mediawatch.enrich.v2.EnrichService.Topics:output_type -> mediawatch.enrich.v2.EnrichResponse
	4,  // 20: mediawatch.enrich.v2.EnrichService.Quotes:output_type -> mediawatch.enrich.v2.EnrichResponse
	4,  // 21: mediawatch.enrich.v2.EnrichService.Claims:output_type -> mediawatch.enrich.v2.EnrichResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_mediawatch_enrich_v2_enrich_proto_init() }
func file_mediawatch_enrich_v2_enrich_proto_init() {
	if File_mediawatch_enrich_v2_enrich_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mediawatch_enrich_v2_enrich_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_enrich_v2_enrich_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_enrich_v2_enrich_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NLP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_enrich_v2_enrich_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_enrich_v2_enrich_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mediawatch_enrich_v2_enrich_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mediawatch_enrich_v2_enrich_proto_goTypes,
		DependencyIndexes: file_mediawatch_enrich_v2_enrich_proto_depIdxs,
		MessageInfos:      file_mediawatch_enrich_v2_enrich_proto_msgTypes,
	}.Build()
	File_mediawatch_enrich_v2_enrich_proto = out.File
	file_mediawatch_enrich_v2_enrich_proto_rawDesc = nil
	file_mediawatch_enrich_v2_enrich_proto_goTypes = nil
	file_mediawatch_enrich_v2_enrich_proto_depIdxs = nil
}
