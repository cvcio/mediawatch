// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mediawatch/articles/v2/articles.proto

package articlesv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/cvcio/mediawatch/pkg/mediawatch/articles/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArticlesServiceName is the fully-qualified name of the ArticlesService service.
	ArticlesServiceName = "mediawatch.articles.v2.ArticlesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArticlesServiceGetArticleProcedure is the fully-qualified name of the ArticlesService's
	// GetArticle RPC.
	ArticlesServiceGetArticleProcedure = "/mediawatch.articles.v2.ArticlesService/GetArticle"
	// ArticlesServiceGetArticlesProcedure is the fully-qualified name of the ArticlesService's
	// GetArticles RPC.
	ArticlesServiceGetArticlesProcedure = "/mediawatch.articles.v2.ArticlesService/GetArticles"
	// ArticlesServiceStreamArticlesProcedure is the fully-qualified name of the ArticlesService's
	// StreamArticles RPC.
	ArticlesServiceStreamArticlesProcedure = "/mediawatch.articles.v2.ArticlesService/StreamArticles"
	// ArticlesServiceStreamRelatedArticlesProcedure is the fully-qualified name of the
	// ArticlesService's StreamRelatedArticles RPC.
	ArticlesServiceStreamRelatedArticlesProcedure = "/mediawatch.articles.v2.ArticlesService/StreamRelatedArticles"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	articlesServiceServiceDescriptor                     = v2.File_mediawatch_articles_v2_articles_proto.Services().ByName("ArticlesService")
	articlesServiceGetArticleMethodDescriptor            = articlesServiceServiceDescriptor.Methods().ByName("GetArticle")
	articlesServiceGetArticlesMethodDescriptor           = articlesServiceServiceDescriptor.Methods().ByName("GetArticles")
	articlesServiceStreamArticlesMethodDescriptor        = articlesServiceServiceDescriptor.Methods().ByName("StreamArticles")
	articlesServiceStreamRelatedArticlesMethodDescriptor = articlesServiceServiceDescriptor.Methods().ByName("StreamRelatedArticles")
)

// ArticlesServiceClient is a client for the mediawatch.articles.v2.ArticlesService service.
type ArticlesServiceClient interface {
	// GetArticle
	GetArticle(context.Context, *connect.Request[v2.QueryArticle]) (*connect.Response[v2.Article], error)
	// GetArticles
	GetArticles(context.Context, *connect.Request[v2.QueryArticle]) (*connect.Response[v2.ArticleList], error)
	// StreamArticles
	StreamArticles(context.Context, *connect.Request[v2.QueryArticle]) (*connect.ServerStreamForClient[v2.ArticleList], error)
	// StreamRelatedArticles
	StreamRelatedArticles(context.Context, *connect.Request[v2.QueryArticle]) (*connect.ServerStreamForClient[v2.ArticleList], error)
}

// NewArticlesServiceClient constructs a client for the mediawatch.articles.v2.ArticlesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArticlesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArticlesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &articlesServiceClient{
		getArticle: connect.NewClient[v2.QueryArticle, v2.Article](
			httpClient,
			baseURL+ArticlesServiceGetArticleProcedure,
			connect.WithSchema(articlesServiceGetArticleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getArticles: connect.NewClient[v2.QueryArticle, v2.ArticleList](
			httpClient,
			baseURL+ArticlesServiceGetArticlesProcedure,
			connect.WithSchema(articlesServiceGetArticlesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamArticles: connect.NewClient[v2.QueryArticle, v2.ArticleList](
			httpClient,
			baseURL+ArticlesServiceStreamArticlesProcedure,
			connect.WithSchema(articlesServiceStreamArticlesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamRelatedArticles: connect.NewClient[v2.QueryArticle, v2.ArticleList](
			httpClient,
			baseURL+ArticlesServiceStreamRelatedArticlesProcedure,
			connect.WithSchema(articlesServiceStreamRelatedArticlesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// articlesServiceClient implements ArticlesServiceClient.
type articlesServiceClient struct {
	getArticle            *connect.Client[v2.QueryArticle, v2.Article]
	getArticles           *connect.Client[v2.QueryArticle, v2.ArticleList]
	streamArticles        *connect.Client[v2.QueryArticle, v2.ArticleList]
	streamRelatedArticles *connect.Client[v2.QueryArticle, v2.ArticleList]
}

// GetArticle calls mediawatch.articles.v2.ArticlesService.GetArticle.
func (c *articlesServiceClient) GetArticle(ctx context.Context, req *connect.Request[v2.QueryArticle]) (*connect.Response[v2.Article], error) {
	return c.getArticle.CallUnary(ctx, req)
}

// GetArticles calls mediawatch.articles.v2.ArticlesService.GetArticles.
func (c *articlesServiceClient) GetArticles(ctx context.Context, req *connect.Request[v2.QueryArticle]) (*connect.Response[v2.ArticleList], error) {
	return c.getArticles.CallUnary(ctx, req)
}

// StreamArticles calls mediawatch.articles.v2.ArticlesService.StreamArticles.
func (c *articlesServiceClient) StreamArticles(ctx context.Context, req *connect.Request[v2.QueryArticle]) (*connect.ServerStreamForClient[v2.ArticleList], error) {
	return c.streamArticles.CallServerStream(ctx, req)
}

// StreamRelatedArticles calls mediawatch.articles.v2.ArticlesService.StreamRelatedArticles.
func (c *articlesServiceClient) StreamRelatedArticles(ctx context.Context, req *connect.Request[v2.QueryArticle]) (*connect.ServerStreamForClient[v2.ArticleList], error) {
	return c.streamRelatedArticles.CallServerStream(ctx, req)
}

// ArticlesServiceHandler is an implementation of the mediawatch.articles.v2.ArticlesService
// service.
type ArticlesServiceHandler interface {
	// GetArticle
	GetArticle(context.Context, *connect.Request[v2.QueryArticle]) (*connect.Response[v2.Article], error)
	// GetArticles
	GetArticles(context.Context, *connect.Request[v2.QueryArticle]) (*connect.Response[v2.ArticleList], error)
	// StreamArticles
	StreamArticles(context.Context, *connect.Request[v2.QueryArticle], *connect.ServerStream[v2.ArticleList]) error
	// StreamRelatedArticles
	StreamRelatedArticles(context.Context, *connect.Request[v2.QueryArticle], *connect.ServerStream[v2.ArticleList]) error
}

// NewArticlesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArticlesServiceHandler(svc ArticlesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	articlesServiceGetArticleHandler := connect.NewUnaryHandler(
		ArticlesServiceGetArticleProcedure,
		svc.GetArticle,
		connect.WithSchema(articlesServiceGetArticleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	articlesServiceGetArticlesHandler := connect.NewUnaryHandler(
		ArticlesServiceGetArticlesProcedure,
		svc.GetArticles,
		connect.WithSchema(articlesServiceGetArticlesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	articlesServiceStreamArticlesHandler := connect.NewServerStreamHandler(
		ArticlesServiceStreamArticlesProcedure,
		svc.StreamArticles,
		connect.WithSchema(articlesServiceStreamArticlesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	articlesServiceStreamRelatedArticlesHandler := connect.NewServerStreamHandler(
		ArticlesServiceStreamRelatedArticlesProcedure,
		svc.StreamRelatedArticles,
		connect.WithSchema(articlesServiceStreamRelatedArticlesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mediawatch.articles.v2.ArticlesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArticlesServiceGetArticleProcedure:
			articlesServiceGetArticleHandler.ServeHTTP(w, r)
		case ArticlesServiceGetArticlesProcedure:
			articlesServiceGetArticlesHandler.ServeHTTP(w, r)
		case ArticlesServiceStreamArticlesProcedure:
			articlesServiceStreamArticlesHandler.ServeHTTP(w, r)
		case ArticlesServiceStreamRelatedArticlesProcedure:
			articlesServiceStreamRelatedArticlesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArticlesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArticlesServiceHandler struct{}

func (UnimplementedArticlesServiceHandler) GetArticle(context.Context, *connect.Request[v2.QueryArticle]) (*connect.Response[v2.Article], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.articles.v2.ArticlesService.GetArticle is not implemented"))
}

func (UnimplementedArticlesServiceHandler) GetArticles(context.Context, *connect.Request[v2.QueryArticle]) (*connect.Response[v2.ArticleList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.articles.v2.ArticlesService.GetArticles is not implemented"))
}

func (UnimplementedArticlesServiceHandler) StreamArticles(context.Context, *connect.Request[v2.QueryArticle], *connect.ServerStream[v2.ArticleList]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.articles.v2.ArticlesService.StreamArticles is not implemented"))
}

func (UnimplementedArticlesServiceHandler) StreamRelatedArticles(context.Context, *connect.Request[v2.QueryArticle], *connect.ServerStream[v2.ArticleList]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mediawatch.articles.v2.ArticlesService.StreamRelatedArticles is not implemented"))
}
