// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mediawatch/articles/v2/articles.proto

package articlesv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArticlesService_GetArticle_FullMethodName            = "/mediawatch.articles.v2.ArticlesService/GetArticle"
	ArticlesService_GetArticles_FullMethodName           = "/mediawatch.articles.v2.ArticlesService/GetArticles"
	ArticlesService_StreamArticles_FullMethodName        = "/mediawatch.articles.v2.ArticlesService/StreamArticles"
	ArticlesService_StreamRelatedArticles_FullMethodName = "/mediawatch.articles.v2.ArticlesService/StreamRelatedArticles"
)

// ArticlesServiceClient is the client API for ArticlesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ArticlesService
type ArticlesServiceClient interface {
	// GetArticle
	GetArticle(ctx context.Context, in *QueryArticle, opts ...grpc.CallOption) (*Article, error)
	// GetArticles
	GetArticles(ctx context.Context, in *QueryArticle, opts ...grpc.CallOption) (*ArticleList, error)
	// StreamArticles
	StreamArticles(ctx context.Context, in *QueryArticle, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArticleList], error)
	// StreamRelatedArticles
	StreamRelatedArticles(ctx context.Context, in *QueryArticle, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArticleList], error)
}

type articlesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticlesServiceClient(cc grpc.ClientConnInterface) ArticlesServiceClient {
	return &articlesServiceClient{cc}
}

func (c *articlesServiceClient) GetArticle(ctx context.Context, in *QueryArticle, opts ...grpc.CallOption) (*Article, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Article)
	err := c.cc.Invoke(ctx, ArticlesService_GetArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) GetArticles(ctx context.Context, in *QueryArticle, opts ...grpc.CallOption) (*ArticleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleList)
	err := c.cc.Invoke(ctx, ArticlesService_GetArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesServiceClient) StreamArticles(ctx context.Context, in *QueryArticle, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArticleList], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ArticlesService_ServiceDesc.Streams[0], ArticlesService_StreamArticles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryArticle, ArticleList]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArticlesService_StreamArticlesClient = grpc.ServerStreamingClient[ArticleList]

func (c *articlesServiceClient) StreamRelatedArticles(ctx context.Context, in *QueryArticle, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArticleList], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ArticlesService_ServiceDesc.Streams[1], ArticlesService_StreamRelatedArticles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryArticle, ArticleList]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArticlesService_StreamRelatedArticlesClient = grpc.ServerStreamingClient[ArticleList]

// ArticlesServiceServer is the server API for ArticlesService service.
// All implementations should embed UnimplementedArticlesServiceServer
// for forward compatibility.
//
// ArticlesService
type ArticlesServiceServer interface {
	// GetArticle
	GetArticle(context.Context, *QueryArticle) (*Article, error)
	// GetArticles
	GetArticles(context.Context, *QueryArticle) (*ArticleList, error)
	// StreamArticles
	StreamArticles(*QueryArticle, grpc.ServerStreamingServer[ArticleList]) error
	// StreamRelatedArticles
	StreamRelatedArticles(*QueryArticle, grpc.ServerStreamingServer[ArticleList]) error
}

// UnimplementedArticlesServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticlesServiceServer struct{}

func (UnimplementedArticlesServiceServer) GetArticle(context.Context, *QueryArticle) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticlesServiceServer) GetArticles(context.Context, *QueryArticle) (*ArticleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticles not implemented")
}
func (UnimplementedArticlesServiceServer) StreamArticles(*QueryArticle, grpc.ServerStreamingServer[ArticleList]) error {
	return status.Errorf(codes.Unimplemented, "method StreamArticles not implemented")
}
func (UnimplementedArticlesServiceServer) StreamRelatedArticles(*QueryArticle, grpc.ServerStreamingServer[ArticleList]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRelatedArticles not implemented")
}
func (UnimplementedArticlesServiceServer) testEmbeddedByValue() {}

// UnsafeArticlesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticlesServiceServer will
// result in compilation errors.
type UnsafeArticlesServiceServer interface {
	mustEmbedUnimplementedArticlesServiceServer()
}

func RegisterArticlesServiceServer(s grpc.ServiceRegistrar, srv ArticlesServiceServer) {
	// If the following call pancis, it indicates UnimplementedArticlesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArticlesService_ServiceDesc, srv)
}

func _ArticlesService_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetArticle(ctx, req.(*QueryArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_GetArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServiceServer).GetArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesService_GetArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServiceServer).GetArticles(ctx, req.(*QueryArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesService_StreamArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryArticle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArticlesServiceServer).StreamArticles(m, &grpc.GenericServerStream[QueryArticle, ArticleList]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArticlesService_StreamArticlesServer = grpc.ServerStreamingServer[ArticleList]

func _ArticlesService_StreamRelatedArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryArticle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArticlesServiceServer).StreamRelatedArticles(m, &grpc.GenericServerStream[QueryArticle, ArticleList]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArticlesService_StreamRelatedArticlesServer = grpc.ServerStreamingServer[ArticleList]

// ArticlesService_ServiceDesc is the grpc.ServiceDesc for ArticlesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticlesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediawatch.articles.v2.ArticlesService",
	HandlerType: (*ArticlesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticle",
			Handler:    _ArticlesService_GetArticle_Handler,
		},
		{
			MethodName: "GetArticles",
			Handler:    _ArticlesService_GetArticles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamArticles",
			Handler:       _ArticlesService_StreamArticles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamRelatedArticles",
			Handler:       _ArticlesService_StreamRelatedArticles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mediawatch/articles/v2/articles.proto",
}
