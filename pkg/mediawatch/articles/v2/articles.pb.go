// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: mediawatch/articles/v2/articles.proto

package articlesv2

import (
	v22 "github.com/cvcio/mediawatch/pkg/mediawatch/common/v2"
	v2 "github.com/cvcio/mediawatch/pkg/mediawatch/enrich/v2"
	v21 "github.com/cvcio/mediawatch/pkg/mediawatch/feeds/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Content
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Excerpt     string   `protobuf:"bytes,2,opt,name=excerpt,proto3" json:"excerpt,omitempty"`
	Image       string   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Body        string   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Authors     []string `protobuf:"bytes,5,rep,name=authors,proto3" json:"authors,omitempty"`
	Sources     []string `protobuf:"bytes,6,rep,name=sources,proto3" json:"sources,omitempty"`
	Tags        []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Categories  []string `protobuf:"bytes,8,rep,name=categories,proto3" json:"categories,omitempty"`
	PublishedAt string   `protobuf:"bytes,9,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	EditedAt    string   `protobuf:"bytes,10,opt,name=edited_at,json=editedAt,proto3" json:"edited_at,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_articles_v2_articles_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_articles_v2_articles_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_mediawatch_articles_v2_articles_proto_rawDescGZIP(), []int{0}
}

func (x *Content) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Content) GetExcerpt() string {
	if x != nil {
		return x.Excerpt
	}
	return ""
}

func (x *Content) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Content) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Content) GetAuthors() []string {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Content) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Content) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Content) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Content) GetPublishedAt() string {
	if x != nil {
		return x.PublishedAt
	}
	return ""
}

func (x *Content) GetEditedAt() string {
	if x != nil {
		return x.EditedAt
	}
	return ""
}

// Article
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	DocId      string    `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Lang       string    `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	Hostname   string    `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Url        string    `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	FeedId     string    `protobuf:"bytes,6,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Content    *Content  `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	Nlp        *v2.NLP   `protobuf:"bytes,8,opt,name=nlp,proto3" json:"nlp,omitempty"`
	Feed       *v21.Feed `protobuf:"bytes,9,opt,name=feed,proto3" json:"feed,omitempty"`
	CrawledAt  string    `protobuf:"bytes,10,opt,name=crawled_at,json=crawledAt,proto3" json:"crawled_at,omitempty"`
	RelCount   int64     `protobuf:"varint,11,opt,name=rel_count,json=relCount,proto3" json:"rel_count,omitempty"`
	ScreenName string    `protobuf:"bytes,12,opt,name=screen_name,json=screenName,proto3" json:"screen_name,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_articles_v2_articles_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_articles_v2_articles_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_mediawatch_articles_v2_articles_proto_rawDescGZIP(), []int{1}
}

func (x *Article) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Article) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *Article) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Article) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Article) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Article) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *Article) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Article) GetNlp() *v2.NLP {
	if x != nil {
		return x.Nlp
	}
	return nil
}

func (x *Article) GetFeed() *v21.Feed {
	if x != nil {
		return x.Feed
	}
	return nil
}

func (x *Article) GetCrawledAt() string {
	if x != nil {
		return x.CrawledAt
	}
	return ""
}

func (x *Article) GetRelCount() int64 {
	if x != nil {
		return x.RelCount
	}
	return 0
}

func (x *Article) GetScreenName() string {
	if x != nil {
		return x.ScreenName
	}
	return ""
}

// QueryArticle
type QueryArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       string       `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	DocId       string       `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Q           string       `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Title       string       `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Body        string       `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Tags        string       `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags,omitempty"`
	Keywords    string       `protobuf:"bytes,7,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Topics      string       `protobuf:"bytes,8,opt,name=topics,proto3" json:"topics,omitempty"`
	Entities    string       `protobuf:"bytes,9,opt,name=entities,proto3" json:"entities,omitempty"`
	Authors     string       `protobuf:"bytes,10,opt,name=authors,proto3" json:"authors,omitempty"`
	Lang        string       `protobuf:"bytes,11,opt,name=lang,proto3" json:"lang,omitempty"`
	Feeds       string       `protobuf:"bytes,12,opt,name=feeds,proto3" json:"feeds,omitempty"`
	Hostnames   string       `protobuf:"bytes,13,opt,name=hostnames,proto3" json:"hostnames,omitempty"`
	CountCases  bool         `protobuf:"varint,14,opt,name=count_cases,json=countCases,proto3" json:"count_cases,omitempty"`
	IncludeRels bool         `protobuf:"varint,15,opt,name=include_rels,json=includeRels,proto3" json:"include_rels,omitempty"`
	Skip        int32        `protobuf:"varint,16,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit       int32        `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Scroll      bool         `protobuf:"varint,18,opt,name=scroll,proto3" json:"scroll,omitempty"`
	Sort        *v22.SortBy  `protobuf:"bytes,19,opt,name=sort,proto3" json:"sort,omitempty"`
	Range       *v22.RangeBy `protobuf:"bytes,20,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *QueryArticle) Reset() {
	*x = QueryArticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_articles_v2_articles_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryArticle) ProtoMessage() {}

func (x *QueryArticle) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_articles_v2_articles_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryArticle.ProtoReflect.Descriptor instead.
func (*QueryArticle) Descriptor() ([]byte, []int) {
	return file_mediawatch_articles_v2_articles_proto_rawDescGZIP(), []int{2}
}

func (x *QueryArticle) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *QueryArticle) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *QueryArticle) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *QueryArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryArticle) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *QueryArticle) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *QueryArticle) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *QueryArticle) GetTopics() string {
	if x != nil {
		return x.Topics
	}
	return ""
}

func (x *QueryArticle) GetEntities() string {
	if x != nil {
		return x.Entities
	}
	return ""
}

func (x *QueryArticle) GetAuthors() string {
	if x != nil {
		return x.Authors
	}
	return ""
}

func (x *QueryArticle) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *QueryArticle) GetFeeds() string {
	if x != nil {
		return x.Feeds
	}
	return ""
}

func (x *QueryArticle) GetHostnames() string {
	if x != nil {
		return x.Hostnames
	}
	return ""
}

func (x *QueryArticle) GetCountCases() bool {
	if x != nil {
		return x.CountCases
	}
	return false
}

func (x *QueryArticle) GetIncludeRels() bool {
	if x != nil {
		return x.IncludeRels
	}
	return false
}

func (x *QueryArticle) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *QueryArticle) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryArticle) GetScroll() bool {
	if x != nil {
		return x.Scroll
	}
	return false
}

func (x *QueryArticle) GetSort() *v22.SortBy {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *QueryArticle) GetRange() *v22.RangeBy {
	if x != nil {
		return x.Range
	}
	return nil
}

// ArticlesResponse
type ArticleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*Article      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *v22.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ArticleList) Reset() {
	*x = ArticleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_articles_v2_articles_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleList) ProtoMessage() {}

func (x *ArticleList) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_articles_v2_articles_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleList.ProtoReflect.Descriptor instead.
func (*ArticleList) Descriptor() ([]byte, []int) {
	return file_mediawatch_articles_v2_articles_proto_rawDescGZIP(), []int{3}
}

func (x *ArticleList) GetData() []*Article {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ArticleList) GetPagination() *v22.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_mediawatch_articles_v2_articles_proto protoreflect.FileDescriptor

var file_mediawatch_articles_v2_articles_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x21, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x65, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x66, 0x65, 0x65, 0x64, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x65,
	0x72, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x65, 0x72,
	0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x81, 0x03, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x65,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x03, 0x6e, 0x6c, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x4c, 0x50, 0x52, 0x03, 0x6e, 0x6c, 0x70, 0x12, 0x2d, 0x0a, 0x04,
	0x66, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x65, 0x65, 0x64, 0x52, 0x04, 0x66, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x04, 0x0a, 0x0c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x79, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x89, 0x03, 0x0a, 0x0f, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x30, 0x01, 0x12, 0x64,
	0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x23, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x30, 0x01, 0x42, 0xe8, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x32, 0x42, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x76, 0x63, 0x69, 0x6f, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x4d, 0x41, 0x58, 0xaa, 0x02, 0x16,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5c, 0x56, 0x32, 0xe2,
	0x02, 0x22, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5c, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x3a, 0x3a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mediawatch_articles_v2_articles_proto_rawDescOnce sync.Once
	file_mediawatch_articles_v2_articles_proto_rawDescData = file_mediawatch_articles_v2_articles_proto_rawDesc
)

func file_mediawatch_articles_v2_articles_proto_rawDescGZIP() []byte {
	file_mediawatch_articles_v2_articles_proto_rawDescOnce.Do(func() {
		file_mediawatch_articles_v2_articles_proto_rawDescData = protoimpl.X.CompressGZIP(file_mediawatch_articles_v2_articles_proto_rawDescData)
	})
	return file_mediawatch_articles_v2_articles_proto_rawDescData
}

var file_mediawatch_articles_v2_articles_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mediawatch_articles_v2_articles_proto_goTypes = []any{
	(*Content)(nil),        // 0: mediawatch.articles.v2.Content
	(*Article)(nil),        // 1: mediawatch.articles.v2.Article
	(*QueryArticle)(nil),   // 2: mediawatch.articles.v2.QueryArticle
	(*ArticleList)(nil),    // 3: mediawatch.articles.v2.ArticleList
	(*v2.NLP)(nil),         // 4: mediawatch.enrich.v2.NLP
	(*v21.Feed)(nil),       // 5: mediawatch.feeds.v2.Feed
	(*v22.SortBy)(nil),     // 6: mediawatch.common.v2.SortBy
	(*v22.RangeBy)(nil),    // 7: mediawatch.common.v2.RangeBy
	(*v22.Pagination)(nil), // 8: mediawatch.common.v2.Pagination
}
var file_mediawatch_articles_v2_articles_proto_depIdxs = []int32{
	0,  // 0: mediawatch.articles.v2.Article.content:type_name -> mediawatch.articles.v2.Content
	4,  // 1: mediawatch.articles.v2.Article.nlp:type_name -> mediawatch.enrich.v2.NLP
	5,  // 2: mediawatch.articles.v2.Article.feed:type_name -> mediawatch.feeds.v2.Feed
	6,  // 3: mediawatch.articles.v2.QueryArticle.sort:type_name -> mediawatch.common.v2.SortBy
	7,  // 4: mediawatch.articles.v2.QueryArticle.range:type_name -> mediawatch.common.v2.RangeBy
	1,  // 5: mediawatch.articles.v2.ArticleList.data:type_name -> mediawatch.articles.v2.Article
	8,  // 6: mediawatch.articles.v2.ArticleList.pagination:type_name -> mediawatch.common.v2.Pagination
	2,  // 7: mediawatch.articles.v2.ArticlesService.GetArticle:input_type -> mediawatch.articles.v2.QueryArticle
	2,  // 8: mediawatch.articles.v2.ArticlesService.GetArticles:input_type -> mediawatch.articles.v2.QueryArticle
	2,  // 9: mediawatch.articles.v2.ArticlesService.StreamArticles:input_type -> mediawatch.articles.v2.QueryArticle
	2,  // 10: mediawatch.articles.v2.ArticlesService.StreamRelatedArticles:input_type -> mediawatch.articles.v2.QueryArticle
	1,  // 11: mediawatch.articles.v2.ArticlesService.GetArticle:output_type -> mediawatch.articles.v2.Article
	3,  // 12: mediawatch.articles.v2.ArticlesService.GetArticles:output_type -> mediawatch.articles.v2.ArticleList
	3,  // 13: mediawatch.articles.v2.ArticlesService.StreamArticles:output_type -> mediawatch.articles.v2.ArticleList
	3,  // 14: mediawatch.articles.v2.ArticlesService.StreamRelatedArticles:output_type -> mediawatch.articles.v2.ArticleList
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_mediawatch_articles_v2_articles_proto_init() }
func file_mediawatch_articles_v2_articles_proto_init() {
	if File_mediawatch_articles_v2_articles_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mediawatch_articles_v2_articles_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_articles_v2_articles_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_articles_v2_articles_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*QueryArticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_articles_v2_articles_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ArticleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mediawatch_articles_v2_articles_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mediawatch_articles_v2_articles_proto_goTypes,
		DependencyIndexes: file_mediawatch_articles_v2_articles_proto_depIdxs,
		MessageInfos:      file_mediawatch_articles_v2_articles_proto_msgTypes,
	}.Build()
	File_mediawatch_articles_v2_articles_proto = out.File
	file_mediawatch_articles_v2_articles_proto_rawDesc = nil
	file_mediawatch_articles_v2_articles_proto_goTypes = nil
	file_mediawatch_articles_v2_articles_proto_depIdxs = nil
}
