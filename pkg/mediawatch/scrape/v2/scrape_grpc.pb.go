// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mediawatch/scrape/v2/scrape.proto

package scrapev2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScrapeService_Scrape_FullMethodName         = "/mediawatch.scrape.v2.ScrapeService/Scrape"
	ScrapeService_SimpleScrape_FullMethodName   = "/mediawatch.scrape.v2.ScrapeService/SimpleScrape"
	ScrapeService_ReloadPassages_FullMethodName = "/mediawatch.scrape.v2.ScrapeService/ReloadPassages"
)

// ScrapeServiceClient is the client API for ScrapeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ScrapeService Service
type ScrapeServiceClient interface {
	// Endpoint Scrape
	Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeResponse, error)
	// Endpoint SimpleScrape
	SimpleScrape(ctx context.Context, in *SimpleScrapeRequest, opts ...grpc.CallOption) (*ScrapeResponse, error)
	// Endpoint ReloadPassages
	ReloadPassages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReloadPassagesResponse, error)
}

type scrapeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScrapeServiceClient(cc grpc.ClientConnInterface) ScrapeServiceClient {
	return &scrapeServiceClient{cc}
}

func (c *scrapeServiceClient) Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrapeResponse)
	err := c.cc.Invoke(ctx, ScrapeService_Scrape_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeServiceClient) SimpleScrape(ctx context.Context, in *SimpleScrapeRequest, opts ...grpc.CallOption) (*ScrapeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScrapeResponse)
	err := c.cc.Invoke(ctx, ScrapeService_SimpleScrape_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeServiceClient) ReloadPassages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReloadPassagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReloadPassagesResponse)
	err := c.cc.Invoke(ctx, ScrapeService_ReloadPassages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrapeServiceServer is the server API for ScrapeService service.
// All implementations should embed UnimplementedScrapeServiceServer
// for forward compatibility.
//
// ScrapeService Service
type ScrapeServiceServer interface {
	// Endpoint Scrape
	Scrape(context.Context, *ScrapeRequest) (*ScrapeResponse, error)
	// Endpoint SimpleScrape
	SimpleScrape(context.Context, *SimpleScrapeRequest) (*ScrapeResponse, error)
	// Endpoint ReloadPassages
	ReloadPassages(context.Context, *Empty) (*ReloadPassagesResponse, error)
}

// UnimplementedScrapeServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScrapeServiceServer struct{}

func (UnimplementedScrapeServiceServer) Scrape(context.Context, *ScrapeRequest) (*ScrapeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scrape not implemented")
}
func (UnimplementedScrapeServiceServer) SimpleScrape(context.Context, *SimpleScrapeRequest) (*ScrapeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleScrape not implemented")
}
func (UnimplementedScrapeServiceServer) ReloadPassages(context.Context, *Empty) (*ReloadPassagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadPassages not implemented")
}
func (UnimplementedScrapeServiceServer) testEmbeddedByValue() {}

// UnsafeScrapeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScrapeServiceServer will
// result in compilation errors.
type UnsafeScrapeServiceServer interface {
	mustEmbedUnimplementedScrapeServiceServer()
}

func RegisterScrapeServiceServer(s grpc.ServiceRegistrar, srv ScrapeServiceServer) {
	// If the following call pancis, it indicates UnimplementedScrapeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScrapeService_ServiceDesc, srv)
}

func _ScrapeService_Scrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeServiceServer).Scrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScrapeService_Scrape_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeServiceServer).Scrape(ctx, req.(*ScrapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeService_SimpleScrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleScrapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeServiceServer).SimpleScrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScrapeService_SimpleScrape_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeServiceServer).SimpleScrape(ctx, req.(*SimpleScrapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeService_ReloadPassages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeServiceServer).ReloadPassages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScrapeService_ReloadPassages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeServiceServer).ReloadPassages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ScrapeService_ServiceDesc is the grpc.ServiceDesc for ScrapeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScrapeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediawatch.scrape.v2.ScrapeService",
	HandlerType: (*ScrapeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scrape",
			Handler:    _ScrapeService_Scrape_Handler,
		},
		{
			MethodName: "SimpleScrape",
			Handler:    _ScrapeService_SimpleScrape_Handler,
		},
		{
			MethodName: "ReloadPassages",
			Handler:    _ScrapeService_ReloadPassages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediawatch/scrape/v2/scrape.proto",
}
