version: '3.2'

services:
  reverse-proxy:
    image: traefik # The official Traefik docker image
    command: --api.insecure=true --providers.docker # Enables the web UI and tells Traefik to listen to docker
    ports:
      - "80:80"     # The HTTP port
      - "8082:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    ports:
      - 9200:9200
      - 9300:9300
    environment:
     - discovery.type=single-node
     - bootstrap.memory_lock=true
     - ES_JAVA_OPTS=-Xms4g -Xmx4g
     - network.host=0.0.0.0
     - xpack.security.enabled=false
    volumes:
      - data_elasticsearh:/usr/share/elasticsearch/data
    labels:
      - "traefik.frontend.rule=Host:elasticsearch.docker.localhost"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    labels:
      - "traefik.frontend.rule=Host:kibana.docker.localhost"

  mongo:
    image: mongo:latest
    ports: 
      - 27017:27017
    volumes:
      - data_mongo:/data/db
    labels:
      - "traefik.frontend.rule=Host:mongo.docker.localhost"
      - "app=mediawatch"
  
  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    links:
      - mongo:mongo
    depends_on:
      - mongo
    labels:
      - "traefik.frontend.rule=Host:express.docker.localhost"

  neo4j:
    image: neo4j:5.5.0
    ports:
      - 7474:7474
      - 7473:7473
      - 7687:7687
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_AUTH=none
      - NEO4J_dbms_allow__upgrade=true
      - NEO4J_server_memory_heap_max__size=2G
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_initial_dbms_default__database=mediawatch
    volumes:
      - data_neo4j_data:/data
      - $PWD/tmp:/export
    labels:
      - "traefik.frontend.rule=Host:neo4j.docker.localhost"

  redis:
    image: redis:7
    ports:
      - 6379:6379

  kafka: # bitnami
    image: bitnami/kafka:latest
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    extra_hosts:
      - "moby:127.0.0.1"
      - "localhost:127.0.0.1"
    volumes:
      - data_kafka:/bitnami/kafka
    labels:
      - "traefik.frontend.rule=Host:kafka.docker.localhost"

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.1
    ports:
      - 8070:8080
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092

volumes:
  data_neo4j_data: 
  data_mongo:
  data_elasticsearh:
  data_dgraph:
  data_kafka:
  data_zookeper:
