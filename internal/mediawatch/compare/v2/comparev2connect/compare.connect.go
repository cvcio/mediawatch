// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mediawatch/compare/v2/compare.proto

package comparev2connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v2 "github.com/cvcio/mediawatch/internal/mediawatch/compare/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CompareServiceName is the fully-qualified name of the CompareService service.
	CompareServiceName = "mediawatch.compare.v2.CompareService"
)

// CompareServiceClient is a client for the mediawatch.compare.v2.CompareService service.
type CompareServiceClient interface {
	// Single compares a single document by id with multiple auto-discovered
	Single(context.Context, *connect_go.Request[v2.SingleRequest]) (*connect_go.Response[v2.SingleResponse], error)
	// OneToMany compares a single document by id with multiple document ids provided
	OneToMany(context.Context, *connect_go.Request[v2.OneToManyRequest]) (*connect_go.Response[v2.MultipleResponse], error)
	// ManyToMany compares a list of documents ids with multiple document ids provided
	ManyToMany(context.Context, *connect_go.Request[v2.ManyToManyRequest]) (*connect_go.Response[v2.MultipleResponse], error)
}

// NewCompareServiceClient constructs a client for the mediawatch.compare.v2.CompareService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCompareServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CompareServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &compareServiceClient{
		single: connect_go.NewClient[v2.SingleRequest, v2.SingleResponse](
			httpClient,
			baseURL+"/mediawatch.compare.v2.CompareService/Single",
			opts...,
		),
		oneToMany: connect_go.NewClient[v2.OneToManyRequest, v2.MultipleResponse](
			httpClient,
			baseURL+"/mediawatch.compare.v2.CompareService/OneToMany",
			opts...,
		),
		manyToMany: connect_go.NewClient[v2.ManyToManyRequest, v2.MultipleResponse](
			httpClient,
			baseURL+"/mediawatch.compare.v2.CompareService/ManyToMany",
			opts...,
		),
	}
}

// compareServiceClient implements CompareServiceClient.
type compareServiceClient struct {
	single     *connect_go.Client[v2.SingleRequest, v2.SingleResponse]
	oneToMany  *connect_go.Client[v2.OneToManyRequest, v2.MultipleResponse]
	manyToMany *connect_go.Client[v2.ManyToManyRequest, v2.MultipleResponse]
}

// Single calls mediawatch.compare.v2.CompareService.Single.
func (c *compareServiceClient) Single(ctx context.Context, req *connect_go.Request[v2.SingleRequest]) (*connect_go.Response[v2.SingleResponse], error) {
	return c.single.CallUnary(ctx, req)
}

// OneToMany calls mediawatch.compare.v2.CompareService.OneToMany.
func (c *compareServiceClient) OneToMany(ctx context.Context, req *connect_go.Request[v2.OneToManyRequest]) (*connect_go.Response[v2.MultipleResponse], error) {
	return c.oneToMany.CallUnary(ctx, req)
}

// ManyToMany calls mediawatch.compare.v2.CompareService.ManyToMany.
func (c *compareServiceClient) ManyToMany(ctx context.Context, req *connect_go.Request[v2.ManyToManyRequest]) (*connect_go.Response[v2.MultipleResponse], error) {
	return c.manyToMany.CallUnary(ctx, req)
}

// CompareServiceHandler is an implementation of the mediawatch.compare.v2.CompareService service.
type CompareServiceHandler interface {
	// Single compares a single document by id with multiple auto-discovered
	Single(context.Context, *connect_go.Request[v2.SingleRequest]) (*connect_go.Response[v2.SingleResponse], error)
	// OneToMany compares a single document by id with multiple document ids provided
	OneToMany(context.Context, *connect_go.Request[v2.OneToManyRequest]) (*connect_go.Response[v2.MultipleResponse], error)
	// ManyToMany compares a list of documents ids with multiple document ids provided
	ManyToMany(context.Context, *connect_go.Request[v2.ManyToManyRequest]) (*connect_go.Response[v2.MultipleResponse], error)
}

// NewCompareServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCompareServiceHandler(svc CompareServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/mediawatch.compare.v2.CompareService/Single", connect_go.NewUnaryHandler(
		"/mediawatch.compare.v2.CompareService/Single",
		svc.Single,
		opts...,
	))
	mux.Handle("/mediawatch.compare.v2.CompareService/OneToMany", connect_go.NewUnaryHandler(
		"/mediawatch.compare.v2.CompareService/OneToMany",
		svc.OneToMany,
		opts...,
	))
	mux.Handle("/mediawatch.compare.v2.CompareService/ManyToMany", connect_go.NewUnaryHandler(
		"/mediawatch.compare.v2.CompareService/ManyToMany",
		svc.ManyToMany,
		opts...,
	))
	return "/mediawatch.compare.v2.CompareService/", mux
}

// UnimplementedCompareServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCompareServiceHandler struct{}

func (UnimplementedCompareServiceHandler) Single(context.Context, *connect_go.Request[v2.SingleRequest]) (*connect_go.Response[v2.SingleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.compare.v2.CompareService.Single is not implemented"))
}

func (UnimplementedCompareServiceHandler) OneToMany(context.Context, *connect_go.Request[v2.OneToManyRequest]) (*connect_go.Response[v2.MultipleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.compare.v2.CompareService.OneToMany is not implemented"))
}

func (UnimplementedCompareServiceHandler) ManyToMany(context.Context, *connect_go.Request[v2.ManyToManyRequest]) (*connect_go.Response[v2.MultipleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.compare.v2.CompareService.ManyToMany is not implemented"))
}
