// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package accountsv2

import (
	context "context"
	v2 "github.com/cvcio/mediawatch/internal/mediawatch/common/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// create new account
	Create(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	// get account with query
	Get(ctx context.Context, in *QueryAccount, opts ...grpc.CallOption) (*Account, error)
	// get list of accounts with query
	List(ctx context.Context, in *QueryAccount, opts ...grpc.CallOption) (*AccountList, error)
	// update an account
	Update(ctx context.Context, in *Account, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	// update account with fields
	UpdateWithFields(ctx context.Context, in *AccountWithFields, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	// delete an account
	Delete(ctx context.Context, in *Account, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	Verify(ctx context.Context, in *Account, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	Reset(ctx context.Context, in *Account, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) Create(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/mediawatch.accounts.v2.AccountService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Get(ctx context.Context, in *QueryAccount, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/mediawatch.accounts.v2.AccountService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) List(ctx context.Context, in *QueryAccount, opts ...grpc.CallOption) (*AccountList, error) {
	out := new(AccountList)
	err := c.cc.Invoke(ctx, "/mediawatch.accounts.v2.AccountService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Update(ctx context.Context, in *Account, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.accounts.v2.AccountService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateWithFields(ctx context.Context, in *AccountWithFields, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.accounts.v2.AccountService/UpdateWithFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Delete(ctx context.Context, in *Account, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.accounts.v2.AccountService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Verify(ctx context.Context, in *Account, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.accounts.v2.AccountService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Reset(ctx context.Context, in *Account, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.accounts.v2.AccountService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations should embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// create new account
	Create(context.Context, *Account) (*Account, error)
	// get account with query
	Get(context.Context, *QueryAccount) (*Account, error)
	// get list of accounts with query
	List(context.Context, *QueryAccount) (*AccountList, error)
	// update an account
	Update(context.Context, *Account) (*v2.ResponseWithMessage, error)
	// update account with fields
	UpdateWithFields(context.Context, *AccountWithFields) (*v2.ResponseWithMessage, error)
	// delete an account
	Delete(context.Context, *Account) (*v2.ResponseWithMessage, error)
	Verify(context.Context, *Account) (*v2.ResponseWithMessage, error)
	Reset(context.Context, *Account) (*v2.ResponseWithMessage, error)
}

// UnimplementedAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) Create(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountServiceServer) Get(context.Context, *QueryAccount) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAccountServiceServer) List(context.Context, *QueryAccount) (*AccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccountServiceServer) Update(context.Context, *Account) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccountServiceServer) UpdateWithFields(context.Context, *AccountWithFields) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithFields not implemented")
}
func (UnimplementedAccountServiceServer) Delete(context.Context, *Account) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountServiceServer) Verify(context.Context, *Account) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedAccountServiceServer) Reset(context.Context, *Account) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.accounts.v2.AccountService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Create(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.accounts.v2.AccountService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Get(ctx, req.(*QueryAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.accounts.v2.AccountService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).List(ctx, req.(*QueryAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.accounts.v2.AccountService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Update(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateWithFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountWithFields)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateWithFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.accounts.v2.AccountService/UpdateWithFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateWithFields(ctx, req.(*AccountWithFields))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.accounts.v2.AccountService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Delete(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.accounts.v2.AccountService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Verify(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.accounts.v2.AccountService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Reset(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediawatch.accounts.v2.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccountService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccountService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccountService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccountService_Update_Handler,
		},
		{
			MethodName: "UpdateWithFields",
			Handler:    _AccountService_UpdateWithFields_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountService_Delete_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _AccountService_Verify_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _AccountService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediawatch/accounts/v2/account.proto",
}
