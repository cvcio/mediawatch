// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mediawatch/feeds/v2/feed.proto

package feedsv2connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v21 "github.com/cvcio/mediawatch/internal/mediawatch/common/v2"
	v2 "github.com/cvcio/mediawatch/internal/mediawatch/feeds/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FeedServiceName is the fully-qualified name of the FeedService service.
	FeedServiceName = "mediawatch.feeds.v2.FeedService"
)

// FeedServiceClient is a client for the mediawatch.feeds.v2.FeedService service.
type FeedServiceClient interface {
	// create a new feed
	Create(context.Context, *connect_go.Request[v2.Feed]) (*connect_go.Response[v2.Feed], error)
	// get a single feed
	Get(context.Context, *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.Feed], error)
	// get list of feeds by query
	List(context.Context, *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.FeedList], error)
	// update a feed
	Update(context.Context, *connect_go.Request[v2.Feed]) (*connect_go.Response[v21.ResponseWithMessage], error)
	// update feed with fields
	UpdateWithFields(context.Context, *connect_go.Request[v2.FeedWithFields]) (*connect_go.Response[v21.ResponseWithMessage], error)
	// delete a feed
	Delete(context.Context, *connect_go.Request[v2.Feed]) (*connect_go.Response[v21.ResponseWithMessage], error)
	// get the stream list
	GetStreamList(context.Context, *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.FeedStreamList], error)
}

// NewFeedServiceClient constructs a client for the mediawatch.feeds.v2.FeedService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeedServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FeedServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &feedServiceClient{
		create: connect_go.NewClient[v2.Feed, v2.Feed](
			httpClient,
			baseURL+"/mediawatch.feeds.v2.FeedService/Create",
			opts...,
		),
		get: connect_go.NewClient[v2.QueryFeed, v2.Feed](
			httpClient,
			baseURL+"/mediawatch.feeds.v2.FeedService/Get",
			opts...,
		),
		list: connect_go.NewClient[v2.QueryFeed, v2.FeedList](
			httpClient,
			baseURL+"/mediawatch.feeds.v2.FeedService/List",
			opts...,
		),
		update: connect_go.NewClient[v2.Feed, v21.ResponseWithMessage](
			httpClient,
			baseURL+"/mediawatch.feeds.v2.FeedService/Update",
			opts...,
		),
		updateWithFields: connect_go.NewClient[v2.FeedWithFields, v21.ResponseWithMessage](
			httpClient,
			baseURL+"/mediawatch.feeds.v2.FeedService/UpdateWithFields",
			opts...,
		),
		delete: connect_go.NewClient[v2.Feed, v21.ResponseWithMessage](
			httpClient,
			baseURL+"/mediawatch.feeds.v2.FeedService/Delete",
			opts...,
		),
		getStreamList: connect_go.NewClient[v2.QueryFeed, v2.FeedStreamList](
			httpClient,
			baseURL+"/mediawatch.feeds.v2.FeedService/GetStreamList",
			opts...,
		),
	}
}

// feedServiceClient implements FeedServiceClient.
type feedServiceClient struct {
	create           *connect_go.Client[v2.Feed, v2.Feed]
	get              *connect_go.Client[v2.QueryFeed, v2.Feed]
	list             *connect_go.Client[v2.QueryFeed, v2.FeedList]
	update           *connect_go.Client[v2.Feed, v21.ResponseWithMessage]
	updateWithFields *connect_go.Client[v2.FeedWithFields, v21.ResponseWithMessage]
	delete           *connect_go.Client[v2.Feed, v21.ResponseWithMessage]
	getStreamList    *connect_go.Client[v2.QueryFeed, v2.FeedStreamList]
}

// Create calls mediawatch.feeds.v2.FeedService.Create.
func (c *feedServiceClient) Create(ctx context.Context, req *connect_go.Request[v2.Feed]) (*connect_go.Response[v2.Feed], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls mediawatch.feeds.v2.FeedService.Get.
func (c *feedServiceClient) Get(ctx context.Context, req *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.Feed], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls mediawatch.feeds.v2.FeedService.List.
func (c *feedServiceClient) List(ctx context.Context, req *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.FeedList], error) {
	return c.list.CallUnary(ctx, req)
}

// Update calls mediawatch.feeds.v2.FeedService.Update.
func (c *feedServiceClient) Update(ctx context.Context, req *connect_go.Request[v2.Feed]) (*connect_go.Response[v21.ResponseWithMessage], error) {
	return c.update.CallUnary(ctx, req)
}

// UpdateWithFields calls mediawatch.feeds.v2.FeedService.UpdateWithFields.
func (c *feedServiceClient) UpdateWithFields(ctx context.Context, req *connect_go.Request[v2.FeedWithFields]) (*connect_go.Response[v21.ResponseWithMessage], error) {
	return c.updateWithFields.CallUnary(ctx, req)
}

// Delete calls mediawatch.feeds.v2.FeedService.Delete.
func (c *feedServiceClient) Delete(ctx context.Context, req *connect_go.Request[v2.Feed]) (*connect_go.Response[v21.ResponseWithMessage], error) {
	return c.delete.CallUnary(ctx, req)
}

// GetStreamList calls mediawatch.feeds.v2.FeedService.GetStreamList.
func (c *feedServiceClient) GetStreamList(ctx context.Context, req *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.FeedStreamList], error) {
	return c.getStreamList.CallUnary(ctx, req)
}

// FeedServiceHandler is an implementation of the mediawatch.feeds.v2.FeedService service.
type FeedServiceHandler interface {
	// create a new feed
	Create(context.Context, *connect_go.Request[v2.Feed]) (*connect_go.Response[v2.Feed], error)
	// get a single feed
	Get(context.Context, *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.Feed], error)
	// get list of feeds by query
	List(context.Context, *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.FeedList], error)
	// update a feed
	Update(context.Context, *connect_go.Request[v2.Feed]) (*connect_go.Response[v21.ResponseWithMessage], error)
	// update feed with fields
	UpdateWithFields(context.Context, *connect_go.Request[v2.FeedWithFields]) (*connect_go.Response[v21.ResponseWithMessage], error)
	// delete a feed
	Delete(context.Context, *connect_go.Request[v2.Feed]) (*connect_go.Response[v21.ResponseWithMessage], error)
	// get the stream list
	GetStreamList(context.Context, *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.FeedStreamList], error)
}

// NewFeedServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeedServiceHandler(svc FeedServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/mediawatch.feeds.v2.FeedService/Create", connect_go.NewUnaryHandler(
		"/mediawatch.feeds.v2.FeedService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/mediawatch.feeds.v2.FeedService/Get", connect_go.NewUnaryHandler(
		"/mediawatch.feeds.v2.FeedService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/mediawatch.feeds.v2.FeedService/List", connect_go.NewUnaryHandler(
		"/mediawatch.feeds.v2.FeedService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/mediawatch.feeds.v2.FeedService/Update", connect_go.NewUnaryHandler(
		"/mediawatch.feeds.v2.FeedService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/mediawatch.feeds.v2.FeedService/UpdateWithFields", connect_go.NewUnaryHandler(
		"/mediawatch.feeds.v2.FeedService/UpdateWithFields",
		svc.UpdateWithFields,
		opts...,
	))
	mux.Handle("/mediawatch.feeds.v2.FeedService/Delete", connect_go.NewUnaryHandler(
		"/mediawatch.feeds.v2.FeedService/Delete",
		svc.Delete,
		opts...,
	))
	mux.Handle("/mediawatch.feeds.v2.FeedService/GetStreamList", connect_go.NewUnaryHandler(
		"/mediawatch.feeds.v2.FeedService/GetStreamList",
		svc.GetStreamList,
		opts...,
	))
	return "/mediawatch.feeds.v2.FeedService/", mux
}

// UnimplementedFeedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFeedServiceHandler struct{}

func (UnimplementedFeedServiceHandler) Create(context.Context, *connect_go.Request[v2.Feed]) (*connect_go.Response[v2.Feed], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.feeds.v2.FeedService.Create is not implemented"))
}

func (UnimplementedFeedServiceHandler) Get(context.Context, *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.Feed], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.feeds.v2.FeedService.Get is not implemented"))
}

func (UnimplementedFeedServiceHandler) List(context.Context, *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.FeedList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.feeds.v2.FeedService.List is not implemented"))
}

func (UnimplementedFeedServiceHandler) Update(context.Context, *connect_go.Request[v2.Feed]) (*connect_go.Response[v21.ResponseWithMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.feeds.v2.FeedService.Update is not implemented"))
}

func (UnimplementedFeedServiceHandler) UpdateWithFields(context.Context, *connect_go.Request[v2.FeedWithFields]) (*connect_go.Response[v21.ResponseWithMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.feeds.v2.FeedService.UpdateWithFields is not implemented"))
}

func (UnimplementedFeedServiceHandler) Delete(context.Context, *connect_go.Request[v2.Feed]) (*connect_go.Response[v21.ResponseWithMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.feeds.v2.FeedService.Delete is not implemented"))
}

func (UnimplementedFeedServiceHandler) GetStreamList(context.Context, *connect_go.Request[v2.QueryFeed]) (*connect_go.Response[v2.FeedStreamList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.feeds.v2.FeedService.GetStreamList is not implemented"))
}
