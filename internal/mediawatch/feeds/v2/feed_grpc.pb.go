// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package feedsv2

import (
	context "context"
	v2 "github.com/cvcio/mediawatch/internal/mediawatch/common/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedServiceClient is the client API for FeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServiceClient interface {
	// create a new feed
	Create(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*Feed, error)
	// get a single feed
	Get(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*Feed, error)
	// get list of feeds by query
	List(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*FeedList, error)
	// update a feed
	Update(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	// update feed with fields
	UpdateWithFields(ctx context.Context, in *FeedWithFields, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	// delete a feed
	Delete(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	// get the stream list
	GetStreamList(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*FeedStreamList, error)
}

type feedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServiceClient(cc grpc.ClientConnInterface) FeedServiceClient {
	return &feedServiceClient{cc}
}

func (c *feedServiceClient) Create(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) Get(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) List(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*FeedList, error) {
	out := new(FeedList)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) Update(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) UpdateWithFields(ctx context.Context, in *FeedWithFields, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/UpdateWithFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) Delete(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetStreamList(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*FeedStreamList, error) {
	out := new(FeedStreamList)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/GetStreamList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServiceServer is the server API for FeedService service.
// All implementations should embed UnimplementedFeedServiceServer
// for forward compatibility
type FeedServiceServer interface {
	// create a new feed
	Create(context.Context, *Feed) (*Feed, error)
	// get a single feed
	Get(context.Context, *QueryFeed) (*Feed, error)
	// get list of feeds by query
	List(context.Context, *QueryFeed) (*FeedList, error)
	// update a feed
	Update(context.Context, *Feed) (*v2.ResponseWithMessage, error)
	// update feed with fields
	UpdateWithFields(context.Context, *FeedWithFields) (*v2.ResponseWithMessage, error)
	// delete a feed
	Delete(context.Context, *Feed) (*v2.ResponseWithMessage, error)
	// get the stream list
	GetStreamList(context.Context, *QueryFeed) (*FeedStreamList, error)
}

// UnimplementedFeedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFeedServiceServer struct {
}

func (UnimplementedFeedServiceServer) Create(context.Context, *Feed) (*Feed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFeedServiceServer) Get(context.Context, *QueryFeed) (*Feed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFeedServiceServer) List(context.Context, *QueryFeed) (*FeedList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFeedServiceServer) Update(context.Context, *Feed) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFeedServiceServer) UpdateWithFields(context.Context, *FeedWithFields) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithFields not implemented")
}
func (UnimplementedFeedServiceServer) Delete(context.Context, *Feed) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFeedServiceServer) GetStreamList(context.Context, *QueryFeed) (*FeedStreamList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamList not implemented")
}

// UnsafeFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServiceServer will
// result in compilation errors.
type UnsafeFeedServiceServer interface {
	mustEmbedUnimplementedFeedServiceServer()
}

func RegisterFeedServiceServer(s grpc.ServiceRegistrar, srv FeedServiceServer) {
	s.RegisterService(&FeedService_ServiceDesc, srv)
}

func _FeedService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).Create(ctx, req.(*Feed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).Get(ctx, req.(*QueryFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).List(ctx, req.(*QueryFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).Update(ctx, req.(*Feed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_UpdateWithFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedWithFields)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).UpdateWithFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/UpdateWithFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).UpdateWithFields(ctx, req.(*FeedWithFields))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).Delete(ctx, req.(*Feed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetStreamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetStreamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/GetStreamList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetStreamList(ctx, req.(*QueryFeed))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedService_ServiceDesc is the grpc.ServiceDesc for FeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediawatch.feeds.v2.FeedService",
	HandlerType: (*FeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FeedService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FeedService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FeedService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FeedService_Update_Handler,
		},
		{
			MethodName: "UpdateWithFields",
			Handler:    _FeedService_UpdateWithFields_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FeedService_Delete_Handler,
		},
		{
			MethodName: "GetStreamList",
			Handler:    _FeedService_GetStreamList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediawatch/feeds/v2/feed.proto",
}
