// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package feedsv2

import (
	context "context"
	v2 "github.com/cvcio/mediawatch/internal/mediawatch/common/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedServiceClient is the client API for FeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServiceClient interface {
	// create a new feed
	CreateFeed(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*Feed, error)
	// get a single feed
	GetFeed(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*Feed, error)
	// get list of feeds by query
	GetFeeds(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*FeedList, error)
	// update a feed
	UpdateFeed(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	// update feed with fields
	UpdateFeedWithFields(ctx context.Context, in *FeedWithFields, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	// delete a feed
	DeleteFeed(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error)
	// get the stream list
	GetFeedsStreamList(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*FeedList, error)
}

type feedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServiceClient(cc grpc.ClientConnInterface) FeedServiceClient {
	return &feedServiceClient{cc}
}

func (c *feedServiceClient) CreateFeed(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/CreateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetFeed(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*Feed, error) {
	out := new(Feed)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetFeeds(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*FeedList, error) {
	out := new(FeedList)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/GetFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) UpdateFeed(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/UpdateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) UpdateFeedWithFields(ctx context.Context, in *FeedWithFields, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/UpdateFeedWithFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) DeleteFeed(ctx context.Context, in *Feed, opts ...grpc.CallOption) (*v2.ResponseWithMessage, error) {
	out := new(v2.ResponseWithMessage)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/DeleteFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetFeedsStreamList(ctx context.Context, in *QueryFeed, opts ...grpc.CallOption) (*FeedList, error) {
	out := new(FeedList)
	err := c.cc.Invoke(ctx, "/mediawatch.feeds.v2.FeedService/GetFeedsStreamList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServiceServer is the server API for FeedService service.
// All implementations should embed UnimplementedFeedServiceServer
// for forward compatibility
type FeedServiceServer interface {
	// create a new feed
	CreateFeed(context.Context, *Feed) (*Feed, error)
	// get a single feed
	GetFeed(context.Context, *QueryFeed) (*Feed, error)
	// get list of feeds by query
	GetFeeds(context.Context, *QueryFeed) (*FeedList, error)
	// update a feed
	UpdateFeed(context.Context, *Feed) (*v2.ResponseWithMessage, error)
	// update feed with fields
	UpdateFeedWithFields(context.Context, *FeedWithFields) (*v2.ResponseWithMessage, error)
	// delete a feed
	DeleteFeed(context.Context, *Feed) (*v2.ResponseWithMessage, error)
	// get the stream list
	GetFeedsStreamList(context.Context, *QueryFeed) (*FeedList, error)
}

// UnimplementedFeedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFeedServiceServer struct {
}

func (UnimplementedFeedServiceServer) CreateFeed(context.Context, *Feed) (*Feed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeed not implemented")
}
func (UnimplementedFeedServiceServer) GetFeed(context.Context, *QueryFeed) (*Feed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedFeedServiceServer) GetFeeds(context.Context, *QueryFeed) (*FeedList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeds not implemented")
}
func (UnimplementedFeedServiceServer) UpdateFeed(context.Context, *Feed) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeed not implemented")
}
func (UnimplementedFeedServiceServer) UpdateFeedWithFields(context.Context, *FeedWithFields) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedWithFields not implemented")
}
func (UnimplementedFeedServiceServer) DeleteFeed(context.Context, *Feed) (*v2.ResponseWithMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeed not implemented")
}
func (UnimplementedFeedServiceServer) GetFeedsStreamList(context.Context, *QueryFeed) (*FeedList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedsStreamList not implemented")
}

// UnsafeFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServiceServer will
// result in compilation errors.
type UnsafeFeedServiceServer interface {
	mustEmbedUnimplementedFeedServiceServer()
}

func RegisterFeedServiceServer(s grpc.ServiceRegistrar, srv FeedServiceServer) {
	s.RegisterService(&FeedService_ServiceDesc, srv)
}

func _FeedService_CreateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).CreateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/CreateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).CreateFeed(ctx, req.(*Feed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetFeed(ctx, req.(*QueryFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/GetFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetFeeds(ctx, req.(*QueryFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_UpdateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).UpdateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/UpdateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).UpdateFeed(ctx, req.(*Feed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_UpdateFeedWithFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedWithFields)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).UpdateFeedWithFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/UpdateFeedWithFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).UpdateFeedWithFields(ctx, req.(*FeedWithFields))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_DeleteFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).DeleteFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/DeleteFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).DeleteFeed(ctx, req.(*Feed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetFeedsStreamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetFeedsStreamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.feeds.v2.FeedService/GetFeedsStreamList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetFeedsStreamList(ctx, req.(*QueryFeed))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedService_ServiceDesc is the grpc.ServiceDesc for FeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediawatch.feeds.v2.FeedService",
	HandlerType: (*FeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeed",
			Handler:    _FeedService_CreateFeed_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _FeedService_GetFeed_Handler,
		},
		{
			MethodName: "GetFeeds",
			Handler:    _FeedService_GetFeeds_Handler,
		},
		{
			MethodName: "UpdateFeed",
			Handler:    _FeedService_UpdateFeed_Handler,
		},
		{
			MethodName: "UpdateFeedWithFields",
			Handler:    _FeedService_UpdateFeedWithFields_Handler,
		},
		{
			MethodName: "DeleteFeed",
			Handler:    _FeedService_DeleteFeed_Handler,
		},
		{
			MethodName: "GetFeedsStreamList",
			Handler:    _FeedService_GetFeedsStreamList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mediawatch/feeds/v2/feed.proto",
}
