// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: mediawatch/feeds/v2/feed.proto

package feedsv2

import (
	v2 "github.com/cvcio/mediawatch/internal/mediawatch/common/v2"
	_ "github.com/srikrsna/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FeedStream Model
type FeedStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stream key to select, can be the twitter_id of the feed in case
	// stream yype is STREAM_TYPE_TWITTER, otherwise an ATOM url
	// or feeds url.
	StreamTarget string `protobuf:"bytes,1,opt,name=stream_target,json=streamTarget,proto3" json:"stream_target,omitempty"`
	// Cron like sceduling used only when stream_type is rss
	ExecuteEvery string `protobuf:"bytes,2,opt,name=execute_every,json=executeEvery,proto3" json:"execute_every,omitempty"`
	// stream type, can be other, twitter or rss
	// currently only twitter is supported
	StreamType v2.StreamType `protobuf:"varint,3,opt,name=stream_type,json=streamType,proto3,enum=mediawatch.common.v2.StreamType" json:"stream_type,omitempty"`
	// common status (see common.proto)
	StreamStatus v2.Status `protobuf:"varint,4,opt,name=stream_status,json=streamStatus,proto3,enum=mediawatch.common.v2.Status" json:"stream_status,omitempty"`
}

func (x *FeedStream) Reset() {
	*x = FeedStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedStream) ProtoMessage() {}

func (x *FeedStream) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedStream.ProtoReflect.Descriptor instead.
func (*FeedStream) Descriptor() ([]byte, []int) {
	return file_mediawatch_feeds_v2_feed_proto_rawDescGZIP(), []int{0}
}

func (x *FeedStream) GetStreamTarget() string {
	if x != nil {
		return x.StreamTarget
	}
	return ""
}

func (x *FeedStream) GetExecuteEvery() string {
	if x != nil {
		return x.ExecuteEvery
	}
	return ""
}

func (x *FeedStream) GetStreamType() v2.StreamType {
	if x != nil {
		return x.StreamType
	}
	return v2.StreamType(0)
}

func (x *FeedStream) GetStreamStatus() v2.Status {
	if x != nil {
		return x.StreamStatus
	}
	return v2.Status(0)
}

// FeedDOM Model
type FeedDOM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomType        string `protobuf:"bytes,1,opt,name=dom_type,json=domType,proto3" json:"dom_type,omitempty"`
	Api            string `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
	Title          string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Excerpt        string `protobuf:"bytes,4,opt,name=excerpt,proto3" json:"excerpt,omitempty"`
	Body           string `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Authors        string `protobuf:"bytes,6,opt,name=authors,proto3" json:"authors,omitempty"`
	Sources        string `protobuf:"bytes,7,opt,name=sources,proto3" json:"sources,omitempty"`
	Tags           string `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	Categories     string `protobuf:"bytes,9,opt,name=categories,proto3" json:"categories,omitempty"`
	PublishedAt    string `protobuf:"bytes,10,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	EditedAt       string `protobuf:"bytes,11,opt,name=edited_at,json=editedAt,proto3" json:"edited_at,omitempty"`
	TimezoneOffset string `protobuf:"bytes,12,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	Img            string `protobuf:"bytes,13,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *FeedDOM) Reset() {
	*x = FeedDOM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedDOM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedDOM) ProtoMessage() {}

func (x *FeedDOM) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedDOM.ProtoReflect.Descriptor instead.
func (*FeedDOM) Descriptor() ([]byte, []int) {
	return file_mediawatch_feeds_v2_feed_proto_rawDescGZIP(), []int{1}
}

func (x *FeedDOM) GetDomType() string {
	if x != nil {
		return x.DomType
	}
	return ""
}

func (x *FeedDOM) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *FeedDOM) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FeedDOM) GetExcerpt() string {
	if x != nil {
		return x.Excerpt
	}
	return ""
}

func (x *FeedDOM) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *FeedDOM) GetAuthors() string {
	if x != nil {
		return x.Authors
	}
	return ""
}

func (x *FeedDOM) GetSources() string {
	if x != nil {
		return x.Sources
	}
	return ""
}

func (x *FeedDOM) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *FeedDOM) GetCategories() string {
	if x != nil {
		return x.Categories
	}
	return ""
}

func (x *FeedDOM) GetPublishedAt() string {
	if x != nil {
		return x.PublishedAt
	}
	return ""
}

func (x *FeedDOM) GetEditedAt() string {
	if x != nil {
		return x.EditedAt
	}
	return ""
}

func (x *FeedDOM) GetTimezoneOffset() string {
	if x != nil {
		return x.TimezoneOffset
	}
	return ""
}

func (x *FeedDOM) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

// FeedLocalization Model
type FeedLocalization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country  string      `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Locality v2.Locality `protobuf:"varint,2,opt,name=locality,proto3,enum=mediawatch.common.v2.Locality" json:"locality,omitempty"`
	// Feed predefined language code in ISO 639-1 format
	Lang string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *FeedLocalization) Reset() {
	*x = FeedLocalization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedLocalization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedLocalization) ProtoMessage() {}

func (x *FeedLocalization) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedLocalization.ProtoReflect.Descriptor instead.
func (*FeedLocalization) Descriptor() ([]byte, []int) {
	return file_mediawatch_feeds_v2_feed_proto_rawDescGZIP(), []int{2}
}

func (x *FeedLocalization) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *FeedLocalization) GetLocality() v2.Locality {
	if x != nil {
		return x.Locality
	}
	return v2.Locality(0)
}

func (x *FeedLocalization) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// FeedMeta Model
type FeedMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// email (if provided)
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// as suggested by ioanna archontaki (phd@uoa)
	// the purpose of these meta is to correlate feeds
	// by their political context
	BusinessType  v2.BusinessType `protobuf:"varint,2,opt,name=business_type,json=businessType,proto3,enum=mediawatch.common.v2.BusinessType" json:"business_type,omitempty"`
	BusinessOwner string          `protobuf:"bytes,3,opt,name=business_owner,json=businessOwner,proto3" json:"business_owner,omitempty"`
	// if the business is registered or not in a
	// public business registry, association, etc.
	BusinessRegistered   bool                    `protobuf:"varint,4,opt,name=business_registered,json=businessRegistered,proto3" json:"business_registered,omitempty"`
	ContentType          v2.ContentType          `protobuf:"varint,5,opt,name=content_type,json=contentType,proto3,enum=mediawatch.common.v2.ContentType" json:"content_type,omitempty"`
	PoliticalOrientation v2.PoliticalOrientation `protobuf:"varint,6,opt,name=political_orientation,json=politicalOrientation,proto3,enum=mediawatch.common.v2.PoliticalOrientation" json:"political_orientation,omitempty"`
	PoliticalAffiliation string                  `protobuf:"bytes,7,opt,name=political_affiliation,json=politicalAffiliation,proto3" json:"political_affiliation,omitempty"`
	Tier                 v2.Tier                 `protobuf:"varint,8,opt,name=tier,proto3,enum=mediawatch.common.v2.Tier" json:"tier,omitempty"`
}

func (x *FeedMeta) Reset() {
	*x = FeedMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedMeta) ProtoMessage() {}

func (x *FeedMeta) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedMeta.ProtoReflect.Descriptor instead.
func (*FeedMeta) Descriptor() ([]byte, []int) {
	return file_mediawatch_feeds_v2_feed_proto_rawDescGZIP(), []int{3}
}

func (x *FeedMeta) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FeedMeta) GetBusinessType() v2.BusinessType {
	if x != nil {
		return x.BusinessType
	}
	return v2.BusinessType(0)
}

func (x *FeedMeta) GetBusinessOwner() string {
	if x != nil {
		return x.BusinessOwner
	}
	return ""
}

func (x *FeedMeta) GetBusinessRegistered() bool {
	if x != nil {
		return x.BusinessRegistered
	}
	return false
}

func (x *FeedMeta) GetContentType() v2.ContentType {
	if x != nil {
		return x.ContentType
	}
	return v2.ContentType(0)
}

func (x *FeedMeta) GetPoliticalOrientation() v2.PoliticalOrientation {
	if x != nil {
		return x.PoliticalOrientation
	}
	return v2.PoliticalOrientation(0)
}

func (x *FeedMeta) GetPoliticalAffiliation() string {
	if x != nil {
		return x.PoliticalAffiliation
	}
	return ""
}

func (x *FeedMeta) GetTier() v2.Tier {
	if x != nil {
		return x.Tier
	}
	return v2.Tier(0)
}

type Feed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID as a string
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	// UUID string representation
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Feed creation datetime in RFC3339 format
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Feed update datetime in RFC3339 format
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Name of the feed
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Twitter user_name of the feed (if appliccable)
	UserName string `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// A small description of the feed
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Twitter id_str of the feed (if appliccable)
	TwitterId string `protobuf:"bytes,8,opt,name=twitter_id,json=twitterId,proto3" json:"twitter_id,omitempty"`
	// Twitter profile_image_url of the feed (if appliccable), or favicon url
	Icon string `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
	// Base url of the feed, including trailing slash `/`
	Url string `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	// strem fields
	Stream *FeedStream `protobuf:"bytes,11,opt,name=stream,proto3" json:"stream,omitempty"`
	// localization fields
	Localization *FeedLocalization `protobuf:"bytes,12,opt,name=localization,proto3" json:"localization,omitempty"`
	// meta fields
	Meta *FeedMeta `protobuf:"bytes,13,opt,name=meta,proto3" json:"meta,omitempty"`
	// dom fiedlds
	Dom *FeedDOM `protobuf:"bytes,14,opt,name=dom,proto3" json:"dom,omitempty"`
}

func (x *Feed) Reset() {
	*x = Feed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feed) ProtoMessage() {}

func (x *Feed) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feed.ProtoReflect.Descriptor instead.
func (*Feed) Descriptor() ([]byte, []int) {
	return file_mediawatch_feeds_v2_feed_proto_rawDescGZIP(), []int{4}
}

func (x *Feed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Feed) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Feed) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Feed) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Feed) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feed) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Feed) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Feed) GetTwitterId() string {
	if x != nil {
		return x.TwitterId
	}
	return ""
}

func (x *Feed) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Feed) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Feed) GetStream() *FeedStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *Feed) GetLocalization() *FeedLocalization {
	if x != nil {
		return x.Localization
	}
	return nil
}

func (x *Feed) GetMeta() *FeedMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Feed) GetDom() *FeedDOM {
	if x != nil {
		return x.Dom
	}
	return nil
}

type FeedStreamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FeedStreamList) Reset() {
	*x = FeedStreamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedStreamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedStreamList) ProtoMessage() {}

func (x *FeedStreamList) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedStreamList.ProtoReflect.Descriptor instead.
func (*FeedStreamList) Descriptor() ([]byte, []int) {
	return file_mediawatch_feeds_v2_feed_proto_rawDescGZIP(), []int{5}
}

func (x *FeedStreamList) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type FeedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*Feed        `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *v2.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *FeedList) Reset() {
	*x = FeedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedList) ProtoMessage() {}

func (x *FeedList) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedList.ProtoReflect.Descriptor instead.
func (*FeedList) Descriptor() ([]byte, []int) {
	return file_mediawatch_feeds_v2_feed_proto_rawDescGZIP(), []int{6}
}

func (x *FeedList) GetData() []*Feed {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FeedList) GetPagination() *v2.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type FeedWithFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta *structpb.Struct `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *FeedWithFields) Reset() {
	*x = FeedWithFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedWithFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedWithFields) ProtoMessage() {}

func (x *FeedWithFields) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedWithFields.ProtoReflect.Descriptor instead.
func (*FeedWithFields) Descriptor() ([]byte, []int) {
	return file_mediawatch_feeds_v2_feed_proto_rawDescGZIP(), []int{7}
}

func (x *FeedWithFields) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeedWithFields) GetMeta() *structpb.Struct {
	if x != nil {
		return x.Meta
	}
	return nil
}

type QueryFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Limit        int64         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page         int64         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	SortOrder    string        `protobuf:"bytes,4,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	SortKey      string        `protobuf:"bytes,5,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	Country      string        `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Lang         string        `protobuf:"bytes,7,opt,name=lang,proto3" json:"lang,omitempty"`
	StreamType   v2.StreamType `protobuf:"varint,8,opt,name=stream_type,json=streamType,proto3,enum=mediawatch.common.v2.StreamType" json:"stream_type,omitempty"`
	StreamStatus v2.Status     `protobuf:"varint,9,opt,name=stream_status,json=streamStatus,proto3,enum=mediawatch.common.v2.Status" json:"stream_status,omitempty"`
}

func (x *QueryFeed) Reset() {
	*x = QueryFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFeed) ProtoMessage() {}

func (x *QueryFeed) ProtoReflect() protoreflect.Message {
	mi := &file_mediawatch_feeds_v2_feed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFeed.ProtoReflect.Descriptor instead.
func (*QueryFeed) Descriptor() ([]byte, []int) {
	return file_mediawatch_feeds_v2_feed_proto_rawDescGZIP(), []int{8}
}

func (x *QueryFeed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryFeed) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryFeed) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryFeed) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

func (x *QueryFeed) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *QueryFeed) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *QueryFeed) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *QueryFeed) GetStreamType() v2.StreamType {
	if x != nil {
		return x.StreamType
	}
	return v2.StreamType(0)
}

func (x *QueryFeed) GetStreamStatus() v2.Status {
	if x != nil {
		return x.StreamStatus
	}
	return v2.Status(0)
}

var File_mediawatch_feeds_v2_feed_proto protoreflect.FileDescriptor

var file_mediawatch_feeds_v2_feed_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x66, 0x65, 0x65,
	0x64, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01, 0x0a,
	0x0a, 0x46, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x07,
	0x46, 0x65, 0x65, 0x64, 0x44, 0x4f, 0x4d, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x63, 0x65, 0x72, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63,
	0x65, 0x72, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x22, 0x7c, 0x0a, 0x10, 0x46,
	0x65, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xcd, 0x03, 0x0a, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x22, 0xba, 0x04, 0x0a, 0x04, 0x46, 0x65,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x9a, 0x84, 0x9e, 0x03, 0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x37, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x49, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x03, 0x64, 0x6f, 0x6d, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x44, 0x4f,
	0x4d, 0x52, 0x03, 0x64, 0x6f, 0x6d, 0x22, 0x24, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x08,
	0x46, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x0e, 0x46, 0x65, 0x65,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xb3, 0x02, 0x0a, 0x09, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x65, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xbe,
	0x04, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x64, 0x1a, 0x1d, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x1a, 0x29, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x29, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x1a, 0x29, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x64, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x42,
	0xd4, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2e, 0x76, 0x32, 0x42, 0x09, 0x46, 0x65, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x76, 0x63, 0x69, 0x6f, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x73, 0x2f,
	0x76, 0x32, 0x3b, 0x66, 0x65, 0x65, 0x64, 0x73, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x4d, 0x46, 0x58,
	0xaa, 0x02, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x73, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5c, 0x46, 0x65, 0x65, 0x64, 0x73, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1f, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5c, 0x46, 0x65, 0x65, 0x64, 0x73, 0x5c,
	0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x15, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x77, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x3a, 0x46, 0x65, 0x65,
	0x64, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mediawatch_feeds_v2_feed_proto_rawDescOnce sync.Once
	file_mediawatch_feeds_v2_feed_proto_rawDescData = file_mediawatch_feeds_v2_feed_proto_rawDesc
)

func file_mediawatch_feeds_v2_feed_proto_rawDescGZIP() []byte {
	file_mediawatch_feeds_v2_feed_proto_rawDescOnce.Do(func() {
		file_mediawatch_feeds_v2_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_mediawatch_feeds_v2_feed_proto_rawDescData)
	})
	return file_mediawatch_feeds_v2_feed_proto_rawDescData
}

var file_mediawatch_feeds_v2_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mediawatch_feeds_v2_feed_proto_goTypes = []interface{}{
	(*FeedStream)(nil),             // 0: mediawatch.feeds.v2.FeedStream
	(*FeedDOM)(nil),                // 1: mediawatch.feeds.v2.FeedDOM
	(*FeedLocalization)(nil),       // 2: mediawatch.feeds.v2.FeedLocalization
	(*FeedMeta)(nil),               // 3: mediawatch.feeds.v2.FeedMeta
	(*Feed)(nil),                   // 4: mediawatch.feeds.v2.Feed
	(*FeedStreamList)(nil),         // 5: mediawatch.feeds.v2.FeedStreamList
	(*FeedList)(nil),               // 6: mediawatch.feeds.v2.FeedList
	(*FeedWithFields)(nil),         // 7: mediawatch.feeds.v2.FeedWithFields
	(*QueryFeed)(nil),              // 8: mediawatch.feeds.v2.QueryFeed
	(v2.StreamType)(0),             // 9: mediawatch.common.v2.StreamType
	(v2.Status)(0),                 // 10: mediawatch.common.v2.Status
	(v2.Locality)(0),               // 11: mediawatch.common.v2.Locality
	(v2.BusinessType)(0),           // 12: mediawatch.common.v2.BusinessType
	(v2.ContentType)(0),            // 13: mediawatch.common.v2.ContentType
	(v2.PoliticalOrientation)(0),   // 14: mediawatch.common.v2.PoliticalOrientation
	(v2.Tier)(0),                   // 15: mediawatch.common.v2.Tier
	(*timestamppb.Timestamp)(nil),  // 16: google.protobuf.Timestamp
	(*v2.Pagination)(nil),          // 17: mediawatch.common.v2.Pagination
	(*structpb.Struct)(nil),        // 18: google.protobuf.Struct
	(*v2.ResponseWithMessage)(nil), // 19: mediawatch.common.v2.ResponseWithMessage
}
var file_mediawatch_feeds_v2_feed_proto_depIdxs = []int32{
	9,  // 0: mediawatch.feeds.v2.FeedStream.stream_type:type_name -> mediawatch.common.v2.StreamType
	10, // 1: mediawatch.feeds.v2.FeedStream.stream_status:type_name -> mediawatch.common.v2.Status
	11, // 2: mediawatch.feeds.v2.FeedLocalization.locality:type_name -> mediawatch.common.v2.Locality
	12, // 3: mediawatch.feeds.v2.FeedMeta.business_type:type_name -> mediawatch.common.v2.BusinessType
	13, // 4: mediawatch.feeds.v2.FeedMeta.content_type:type_name -> mediawatch.common.v2.ContentType
	14, // 5: mediawatch.feeds.v2.FeedMeta.political_orientation:type_name -> mediawatch.common.v2.PoliticalOrientation
	15, // 6: mediawatch.feeds.v2.FeedMeta.tier:type_name -> mediawatch.common.v2.Tier
	16, // 7: mediawatch.feeds.v2.Feed.created_at:type_name -> google.protobuf.Timestamp
	16, // 8: mediawatch.feeds.v2.Feed.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 9: mediawatch.feeds.v2.Feed.stream:type_name -> mediawatch.feeds.v2.FeedStream
	2,  // 10: mediawatch.feeds.v2.Feed.localization:type_name -> mediawatch.feeds.v2.FeedLocalization
	3,  // 11: mediawatch.feeds.v2.Feed.meta:type_name -> mediawatch.feeds.v2.FeedMeta
	1,  // 12: mediawatch.feeds.v2.Feed.dom:type_name -> mediawatch.feeds.v2.FeedDOM
	4,  // 13: mediawatch.feeds.v2.FeedList.data:type_name -> mediawatch.feeds.v2.Feed
	17, // 14: mediawatch.feeds.v2.FeedList.pagination:type_name -> mediawatch.common.v2.Pagination
	18, // 15: mediawatch.feeds.v2.FeedWithFields.meta:type_name -> google.protobuf.Struct
	9,  // 16: mediawatch.feeds.v2.QueryFeed.stream_type:type_name -> mediawatch.common.v2.StreamType
	10, // 17: mediawatch.feeds.v2.QueryFeed.stream_status:type_name -> mediawatch.common.v2.Status
	4,  // 18: mediawatch.feeds.v2.FeedService.Create:input_type -> mediawatch.feeds.v2.Feed
	8,  // 19: mediawatch.feeds.v2.FeedService.Get:input_type -> mediawatch.feeds.v2.QueryFeed
	8,  // 20: mediawatch.feeds.v2.FeedService.List:input_type -> mediawatch.feeds.v2.QueryFeed
	4,  // 21: mediawatch.feeds.v2.FeedService.Update:input_type -> mediawatch.feeds.v2.Feed
	7,  // 22: mediawatch.feeds.v2.FeedService.UpdateWithFields:input_type -> mediawatch.feeds.v2.FeedWithFields
	4,  // 23: mediawatch.feeds.v2.FeedService.Delete:input_type -> mediawatch.feeds.v2.Feed
	8,  // 24: mediawatch.feeds.v2.FeedService.GetStreamList:input_type -> mediawatch.feeds.v2.QueryFeed
	4,  // 25: mediawatch.feeds.v2.FeedService.Create:output_type -> mediawatch.feeds.v2.Feed
	4,  // 26: mediawatch.feeds.v2.FeedService.Get:output_type -> mediawatch.feeds.v2.Feed
	6,  // 27: mediawatch.feeds.v2.FeedService.List:output_type -> mediawatch.feeds.v2.FeedList
	19, // 28: mediawatch.feeds.v2.FeedService.Update:output_type -> mediawatch.common.v2.ResponseWithMessage
	19, // 29: mediawatch.feeds.v2.FeedService.UpdateWithFields:output_type -> mediawatch.common.v2.ResponseWithMessage
	19, // 30: mediawatch.feeds.v2.FeedService.Delete:output_type -> mediawatch.common.v2.ResponseWithMessage
	5,  // 31: mediawatch.feeds.v2.FeedService.GetStreamList:output_type -> mediawatch.feeds.v2.FeedStreamList
	25, // [25:32] is the sub-list for method output_type
	18, // [18:25] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_mediawatch_feeds_v2_feed_proto_init() }
func file_mediawatch_feeds_v2_feed_proto_init() {
	if File_mediawatch_feeds_v2_feed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mediawatch_feeds_v2_feed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_feeds_v2_feed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedDOM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_feeds_v2_feed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedLocalization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_feeds_v2_feed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_feeds_v2_feed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_feeds_v2_feed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedStreamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_feeds_v2_feed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_feeds_v2_feed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedWithFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediawatch_feeds_v2_feed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mediawatch_feeds_v2_feed_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mediawatch_feeds_v2_feed_proto_goTypes,
		DependencyIndexes: file_mediawatch_feeds_v2_feed_proto_depIdxs,
		MessageInfos:      file_mediawatch_feeds_v2_feed_proto_msgTypes,
	}.Build()
	File_mediawatch_feeds_v2_feed_proto = out.File
	file_mediawatch_feeds_v2_feed_proto_rawDesc = nil
	file_mediawatch_feeds_v2_feed_proto_goTypes = nil
	file_mediawatch_feeds_v2_feed_proto_depIdxs = nil
}
