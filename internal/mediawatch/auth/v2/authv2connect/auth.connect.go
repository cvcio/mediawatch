// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mediawatch/auth/v2/auth.proto

package authv2connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v2 "github.com/cvcio/mediawatch/internal/mediawatch/auth/v2"
	v22 "github.com/cvcio/mediawatch/internal/mediawatch/common/v2"
	v21 "github.com/cvcio/mediawatch/internal/mediawatch/sessions/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "mediawatch.auth.v2.AuthService"
)

// AuthServiceClient is a client for the mediawatch.auth.v2.AuthService service.
type AuthServiceClient interface {
	// authenticate user with magick link
	Authenticate(context.Context, *connect_go.Request[v2.Credentials]) (*connect_go.Response[v21.Session], error)
	// invite user with magick link
	InviteWithMagic(context.Context, *connect_go.Request[v2.Credentials]) (*connect_go.Response[v22.ResponseWithMessage], error)
	// get the otpauth link and qr-code
	GetVerificationLink(context.Context, *connect_go.Request[v2.Verification]) (*connect_go.Response[v21.Session], error)
	// verify user with a predefined 2fa method
	Verify(context.Context, *connect_go.Request[v2.Verification]) (*connect_go.Response[v2.Token], error)
	// authorize user with an external service such as google
	Authorize(context.Context, *connect_go.Request[v2.Credentials]) (*connect_go.Response[v2.Token], error)
	// generate token
	GenerateToken(context.Context, *connect_go.Request[v2.Token]) (*connect_go.Response[v2.Token], error)
	// refresh token
	RefreshToken(context.Context, *connect_go.Request[v2.Token]) (*connect_go.Response[v2.Token], error)
}

// NewAuthServiceClient constructs a client for the mediawatch.auth.v2.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		authenticate: connect_go.NewClient[v2.Credentials, v21.Session](
			httpClient,
			baseURL+"/mediawatch.auth.v2.AuthService/Authenticate",
			opts...,
		),
		inviteWithMagic: connect_go.NewClient[v2.Credentials, v22.ResponseWithMessage](
			httpClient,
			baseURL+"/mediawatch.auth.v2.AuthService/InviteWithMagic",
			opts...,
		),
		getVerificationLink: connect_go.NewClient[v2.Verification, v21.Session](
			httpClient,
			baseURL+"/mediawatch.auth.v2.AuthService/GetVerificationLink",
			opts...,
		),
		verify: connect_go.NewClient[v2.Verification, v2.Token](
			httpClient,
			baseURL+"/mediawatch.auth.v2.AuthService/Verify",
			opts...,
		),
		authorize: connect_go.NewClient[v2.Credentials, v2.Token](
			httpClient,
			baseURL+"/mediawatch.auth.v2.AuthService/Authorize",
			opts...,
		),
		generateToken: connect_go.NewClient[v2.Token, v2.Token](
			httpClient,
			baseURL+"/mediawatch.auth.v2.AuthService/GenerateToken",
			opts...,
		),
		refreshToken: connect_go.NewClient[v2.Token, v2.Token](
			httpClient,
			baseURL+"/mediawatch.auth.v2.AuthService/RefreshToken",
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	authenticate        *connect_go.Client[v2.Credentials, v21.Session]
	inviteWithMagic     *connect_go.Client[v2.Credentials, v22.ResponseWithMessage]
	getVerificationLink *connect_go.Client[v2.Verification, v21.Session]
	verify              *connect_go.Client[v2.Verification, v2.Token]
	authorize           *connect_go.Client[v2.Credentials, v2.Token]
	generateToken       *connect_go.Client[v2.Token, v2.Token]
	refreshToken        *connect_go.Client[v2.Token, v2.Token]
}

// Authenticate calls mediawatch.auth.v2.AuthService.Authenticate.
func (c *authServiceClient) Authenticate(ctx context.Context, req *connect_go.Request[v2.Credentials]) (*connect_go.Response[v21.Session], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// InviteWithMagic calls mediawatch.auth.v2.AuthService.InviteWithMagic.
func (c *authServiceClient) InviteWithMagic(ctx context.Context, req *connect_go.Request[v2.Credentials]) (*connect_go.Response[v22.ResponseWithMessage], error) {
	return c.inviteWithMagic.CallUnary(ctx, req)
}

// GetVerificationLink calls mediawatch.auth.v2.AuthService.GetVerificationLink.
func (c *authServiceClient) GetVerificationLink(ctx context.Context, req *connect_go.Request[v2.Verification]) (*connect_go.Response[v21.Session], error) {
	return c.getVerificationLink.CallUnary(ctx, req)
}

// Verify calls mediawatch.auth.v2.AuthService.Verify.
func (c *authServiceClient) Verify(ctx context.Context, req *connect_go.Request[v2.Verification]) (*connect_go.Response[v2.Token], error) {
	return c.verify.CallUnary(ctx, req)
}

// Authorize calls mediawatch.auth.v2.AuthService.Authorize.
func (c *authServiceClient) Authorize(ctx context.Context, req *connect_go.Request[v2.Credentials]) (*connect_go.Response[v2.Token], error) {
	return c.authorize.CallUnary(ctx, req)
}

// GenerateToken calls mediawatch.auth.v2.AuthService.GenerateToken.
func (c *authServiceClient) GenerateToken(ctx context.Context, req *connect_go.Request[v2.Token]) (*connect_go.Response[v2.Token], error) {
	return c.generateToken.CallUnary(ctx, req)
}

// RefreshToken calls mediawatch.auth.v2.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect_go.Request[v2.Token]) (*connect_go.Response[v2.Token], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the mediawatch.auth.v2.AuthService service.
type AuthServiceHandler interface {
	// authenticate user with magick link
	Authenticate(context.Context, *connect_go.Request[v2.Credentials]) (*connect_go.Response[v21.Session], error)
	// invite user with magick link
	InviteWithMagic(context.Context, *connect_go.Request[v2.Credentials]) (*connect_go.Response[v22.ResponseWithMessage], error)
	// get the otpauth link and qr-code
	GetVerificationLink(context.Context, *connect_go.Request[v2.Verification]) (*connect_go.Response[v21.Session], error)
	// verify user with a predefined 2fa method
	Verify(context.Context, *connect_go.Request[v2.Verification]) (*connect_go.Response[v2.Token], error)
	// authorize user with an external service such as google
	Authorize(context.Context, *connect_go.Request[v2.Credentials]) (*connect_go.Response[v2.Token], error)
	// generate token
	GenerateToken(context.Context, *connect_go.Request[v2.Token]) (*connect_go.Response[v2.Token], error)
	// refresh token
	RefreshToken(context.Context, *connect_go.Request[v2.Token]) (*connect_go.Response[v2.Token], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/mediawatch.auth.v2.AuthService/Authenticate", connect_go.NewUnaryHandler(
		"/mediawatch.auth.v2.AuthService/Authenticate",
		svc.Authenticate,
		opts...,
	))
	mux.Handle("/mediawatch.auth.v2.AuthService/InviteWithMagic", connect_go.NewUnaryHandler(
		"/mediawatch.auth.v2.AuthService/InviteWithMagic",
		svc.InviteWithMagic,
		opts...,
	))
	mux.Handle("/mediawatch.auth.v2.AuthService/GetVerificationLink", connect_go.NewUnaryHandler(
		"/mediawatch.auth.v2.AuthService/GetVerificationLink",
		svc.GetVerificationLink,
		opts...,
	))
	mux.Handle("/mediawatch.auth.v2.AuthService/Verify", connect_go.NewUnaryHandler(
		"/mediawatch.auth.v2.AuthService/Verify",
		svc.Verify,
		opts...,
	))
	mux.Handle("/mediawatch.auth.v2.AuthService/Authorize", connect_go.NewUnaryHandler(
		"/mediawatch.auth.v2.AuthService/Authorize",
		svc.Authorize,
		opts...,
	))
	mux.Handle("/mediawatch.auth.v2.AuthService/GenerateToken", connect_go.NewUnaryHandler(
		"/mediawatch.auth.v2.AuthService/GenerateToken",
		svc.GenerateToken,
		opts...,
	))
	mux.Handle("/mediawatch.auth.v2.AuthService/RefreshToken", connect_go.NewUnaryHandler(
		"/mediawatch.auth.v2.AuthService/RefreshToken",
		svc.RefreshToken,
		opts...,
	))
	return "/mediawatch.auth.v2.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Authenticate(context.Context, *connect_go.Request[v2.Credentials]) (*connect_go.Response[v21.Session], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.auth.v2.AuthService.Authenticate is not implemented"))
}

func (UnimplementedAuthServiceHandler) InviteWithMagic(context.Context, *connect_go.Request[v2.Credentials]) (*connect_go.Response[v22.ResponseWithMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.auth.v2.AuthService.InviteWithMagic is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetVerificationLink(context.Context, *connect_go.Request[v2.Verification]) (*connect_go.Response[v21.Session], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.auth.v2.AuthService.GetVerificationLink is not implemented"))
}

func (UnimplementedAuthServiceHandler) Verify(context.Context, *connect_go.Request[v2.Verification]) (*connect_go.Response[v2.Token], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.auth.v2.AuthService.Verify is not implemented"))
}

func (UnimplementedAuthServiceHandler) Authorize(context.Context, *connect_go.Request[v2.Credentials]) (*connect_go.Response[v2.Token], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.auth.v2.AuthService.Authorize is not implemented"))
}

func (UnimplementedAuthServiceHandler) GenerateToken(context.Context, *connect_go.Request[v2.Token]) (*connect_go.Response[v2.Token], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.auth.v2.AuthService.GenerateToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect_go.Request[v2.Token]) (*connect_go.Response[v2.Token], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mediawatch.auth.v2.AuthService.RefreshToken is not implemented"))
}
