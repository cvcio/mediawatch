syntax = "proto3";

package mediawatch.common.v2;

// Status Enumeration
//
// Status enumeration is shared accross multiple messages.
//
// Status of an object can be PENDING for an object that is not yet operational, 
// ACTIVE for operational objects, SUSPENDED for objects that are temporarily 
// not operational, CLOSED for objects that are no longer operational, 
// DELETED for objects that are removed from the system, and OFFLINE for 
// objects that are unreachable online.
//
// An object can be a feed, an organization, an account, or any other object in the system.
enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_PENDING = 1;
    STATUS_ACTIVE = 2;
    STATUS_SUSPENDED = 3;
    STATUS_CLOSED = 4; 
    STATUS_DELETED = 5;
    STATUS_OFFLINE = 6;
};

// State Enumeration
//
// State of the media outlet can be OK for a feed that is operational (reachable online), 
// and NOT_OK for feeds that are not operational (unreachable online).
enum State {
    STATE_UNSPECIFIED = 0;
    STATE_OK = 1;
    STATE_NOT_OK = 2;
};

// StreamType Enumeration
//
// Stream type of the feed can be TWITTER for a Twitter feed, RSS for an RSS feed, 
// OTHER for a custom feed (parsed by the system using a custom parser), and UNSPECIFIED as a default.
//
// As of June 2023, Twitter has stopped providing the public API access to the Twitter feeds, 
// and as such is no longer supported.
enum StreamType {
    STREAM_TYPE_UNSPECIFIED = 0;
    STREAM_TYPE_OTHER = 1;
    STREAM_TYPE_TWITTER = 2;
    STREAM_TYPE_RSS = 3;
};

// Locality Enumeration
//
// Locality of the media outlet can be LOCAL for a local media outlet, NATIONAL for a 
// media outlet covering national news, INTERNATIONAL for a media outlet covering international news, 
// MIXED for a media outlet covering both national and international news, UNSPECIFIED for 
// a default value, OTHER for any other value that does not fit in any of the previous categories.
enum Locality {
    LOCALITY_UNSPECIFIED = 0;
    LOCALITY_OTHER = 1;
    LOCALITY_LOCAL = 2;
    LOCALITY_NATIONAL = 3;
    LOCALITY_INTERNATIONAL = 4;
};

// BusinessType Enumeration
//
// Business type of the media outlet can be STATE for state controlled media outlets, 
// ORGANIZATION for news organizations that employ journalists, BLOG for personal blogs, 
// PORTAL for news aggregators and portals, OTHER for any other value that does not 
// fit in any of the previous categories, and UNSPECIFIED as a default.
enum BusinessType {
    BUSINESS_TYPE_UNSPECIFIED = 0;
    BUSINESS_TYPE_OTHER = 1;
    BUSINESS_TYPE_STATE = 2;
    BUSINESS_TYPE_ORGANIZATION = 3;
    BUSINESS_TYPE_BLOG = 4;
    BUSINESS_TYPE_PORTAL = 5;
    BUSINESS_TYPE_NON_PROFIT = 6;
    BUSINESS_TYPE_ACADEMIA = 7;
};

// ContentType Enumeration
//
// Content type of the media outlet describes the type of content the media outlet publishes in majority.
// Currently supported content types are NEWS for news media, MARKET_BUSINESS for business and market news,
// DEFENCE_ARMY_POLICE for defense, army and police news, ENTERTAINMENT for entertainment news, HEALTH_BEAUTY
// for health and beauty news, SPORTS for sports news, RELIGION for religion news, OPINION for opinion news,
// AGRICULTURE for agriculture news, SCIENCE for science news, EDUCATION for education news, JUSTICE for justice news,
// MEDIA for media news, LIFESTYLE for lifestyle news, AUTO for automotive news, MUSIC for music news, TECH for technology news,
// TRAVEL for travel news, ENERGY for energy news, ENVIRONMENT for environment news, and OTHER for any other value that does not
// fit in any of the previous categories. For a default value use UNSPECIFIED.
//
// In the future we should consider adding more content types, and possibly a way to add custom content types, or additionally we should refactor
// this enumeration to be a string based enumeration, and allow for any value to be added.
enum ContentType {
    CONTENT_TYPE_UNSPECIFIED = 0;
    CONTENT_TYPE_OTHER = 1;
    CONTENT_TYPE_NEWS = 2;
    CONTENT_TYPE_MARKET_BUSINESS = 3;
    CONTENT_TYPE_DEFENCE_ARMY_POLICE = 4;
    CONTENT_TYPE_ENTERTAINMENT = 5;
    CONTENT_TYPE_HEALTH_BEAUTY = 6;
    CONTENT_TYPE_SPORTS = 7;
    CONTENT_TYPE_RELIGION = 8;
    CONTENT_TYPE_OPINION = 9;
    CONTENT_TYPE_AGRICULTURE = 10;
    CONTENT_TYPE_SCIENCE = 11;
    CONTENT_TYPE_EDUCATION = 12;
    CONTENT_TYPE_JUSTICE = 13;
    CONTENT_TYPE_MEDIA = 14;
    CONTENT_TYPE_LIFESTYLE = 15;
    CONTENT_TYPE_AUTO = 16;
    CONTENT_TYPE_MUSIC = 17;
    CONTENT_TYPE_TECH = 18;
    CONTENT_TYPE_TRAVEL = 19;
    CONTENT_TYPE_ENERGY = 20;
    CONTENT_TYPE_ENVIRONMENT = 21;
};

// PoliticalOrientation Enumeration
//
// IMPORTANT: Political orientation of the media outlet should be examined carefully, and peer reviewed
// before assigning a value to it. Use this enumeration with caution.
//
// Political orientation of the media outlet can be LEFT for left wing media, 
// CENTER_LEFT for center left media, CENTER for center media, CENTER_RIGHT for 
// center right media, RIGHT for right wing media, and FAR_RIGHT for far right media.
// For any other value that does not fit in any of the previous categories use OTHER,
// and for a default value use UNSPECIFIED.
enum PoliticalOrientation {
    POLITICAL_ORIENTATION_UNSPECIFIED = 0;
    POLITICAL_ORIENTATION_OTHER = 1;
    POLITICAL_ORIENTATION_LEFT = 2;
    POLITICAL_ORIENTATION_CENTER_LEFT = 3;
    POLITICAL_ORIENTATION_CENTER = 4;
    POLITICAL_ORIENTATION_CENTER_RIGHT = 5;
    POLITICAL_ORIENTATION_RIGHT = 6;
    POLITICAL_ORIENTATION_FAR_RIGHT = 7;
};

// Tier Enumeration
//
// Tier of the media outlet can be TRADITIONAL for a printed media outlet, DIGITAL for outlets 
// that only have online presence, AGENCY for news agencies, BROADCASTING for broadcasting 
// media (tv, radio), OTHER for any other format that does not fit in any of the previous categories, 
// and UNSPECIFIED as a default.
enum Tier {
    TIER_UNSPECIFIED = 0;
    TIER_OTHER = 1;
    TIER_TRADITIONAL = 2;
    TIER_DIGITAL = 3;
    TIER_AGENCY = 4;
    TIER_BROADCASTING = 5;
};

// Pagination
message Pagination {
    int64 total = 1;
    int64 pages = 2;
};

// ResponseWithMessage
message ResponseWithMessage {
    string status = 1;
    string message = 2;
};

message SortBy {
    string by = 1;
    bool asc = 2;
};

message RangeBy {
    string by = 1;
    string from = 2;
    string to = 3;
};